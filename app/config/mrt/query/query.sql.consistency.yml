fragments:
  COLLQ: |
    select
      c.id inv_collection_id,
      mnemonic,
      ark collection_ark,
      name,
      count(*) num_objs,
      inio.role as role,
      n.number as node_number,
      n.description as node_description
    from
      inv.inv_collections c
    inner join inv.inv_collections_inv_objects icio
      on c.id = icio.inv_collection_id
    inner join inv.inv_nodes_inv_objects inio
      on icio.inv_object_id = inio.inv_object_id
    inner join inv.inv_nodes n
      on inio.inv_node_id = n.id
    {{{WHERE}}}
    group by
      inv_collection_id,
      mnemonic,
      collection_ark,
      name,
      role,
      node_number,
      node_description
  OBJQ: |
    {{{OBJQPRE}}}
    {{{WHERE}}}
    {{{OBJQPOST}}}
  # Note that the following is not paginate-able 
  OBJSUBQ: |
    {{{OBJQPRE}}}
    where exists (
      select 1
      from (
        {{{SUBWHERE}}}
        limit 20
      ) as q
      where q.inv_object_id = o.id
    )
    {{{OBJQPOST}}} 
  OBJQPRE: |
    select
      o.id inv_object_id,
      o.ark,
      '' as actions,
      o.version_number,
      group_concat(c.mnemonic) as mnemonics,
      own.name as own_name,
      erc_what,
      erc_who,
      erc_when,
      (select group_concat(local_id) from inv.inv_localids loc where loc.inv_object_ark = o.ark and loc.inv_owner_ark = own.ark) as local_ids,
      o.created,
      billable_size,
      file_count
    from
      inv.inv_objects o
    left join inv.inv_collections_inv_objects icio
      on o.id = icio.inv_object_id
    left join inv.inv_collections c
      on icio.inv_collection_id = c.id
    left join inv.inv_owners own
      on o.inv_owner_id = own.id
    left join billing.object_size os 
      on o.id = os.inv_object_id
  OBJQPOST: |
    group by
      inv_object_id,
      o.ark,
      o.version_number,
      own.name,
      erc_what,
      erc_who,
      erc_when,
      created,
      billable_size,
      file_count
    order by o.id desc
    limit {{{LIMIT}}}
    offset {{{OFFSET}}}
  # TODO - window function to get max version
  OBJFILES: |
    select
      o.ark,
      v.number,
      (
        select max(vv.number)
        from inv.inv_files ff
        inner join inv.inv_versions vv
          on ff.inv_version_id = vv.id
        where
          ff.inv_object_id = o.id
        and exists (
          select 1 where ff.pathname = f.pathname
        )
      ) as maxv,
      f.source,
      binary f.pathname,
      f.full_size,
      f.created,
      ifnull(group_concat(n.number), '') as nodelist,
      ifnull(
        group_concat(
          case
            when a.status = 'verified' then null
            else n.number
          end
        ),
        ''
      ) as unverified
    from
      inv.inv_objects o
    inner join inv.inv_versions v
      on o.id = v.inv_object_id
    inner join inv.inv_files f
      on o.id = f.inv_object_id
      and v.id = f.inv_version_id
    left join inv.inv_audits a
      on
        o.id = a.inv_object_id
      and
        f.id = a.inv_file_id
    left join inv.inv_nodes n
      on a.inv_node_id = n.id
    {{{WHERE}}}
    and
      f.billable_size = f.full_size
    group by
      o.ark,
      v.number,
      f.source,
      binary f.pathname,
      f.full_size,
      f.created
    order by
      f.created desc,
      source,
      pathname
    limit {{{LIMIT}}}
    offset {{{OFFSET}}}
  OBJREPL: |
    select
      nn.ark,
      nn.inv_object_id,
      nn.role,
      nn.node_id,
      '' actions,
      nn.node_number,
      nn.description,
      nn.access_mode,
      nn.created,
      nn.replicated,
      (
        select count(*) from inv.inv_audits a
        where 
          a.inv_object_id = nn.inv_object_id and a.inv_node_id=nn.node_id 
          and status != 'verified'
      ) as unverified,
      (
        select max(verified) from inv.inv_audits a
        where a.inv_object_id = nn.inv_object_id and a.inv_node_id=nn.node_id
      ) as last_verified,
      nn.version_number
    from (
      select
        inio.role,
        n.id node_id,
        n.number node_number,
        n.description,
        n.access_mode,
        o.created,
        inio.replicated as replicated,
        o.id as inv_object_id,
        o.ark as ark,
        o.version_number
      from
        inv.inv_objects o
      inner join inv.inv_nodes_inv_objects inio
        on o.id = inio.inv_object_id
      inner join inv.inv_nodes n
        on inio.inv_node_id = n.id
      {{{WHERE}}}
    ) as nn
  OBJREPLPRE: |
    with copies as (
      select
        inv_object_id,
        count(*) as num_copies
      from
        inv.inv_nodes_inv_objects
      group by
        inv_object_id
      having
        count(*) = {{{COPIES}}}
    )
  FILEREPLPRE: |
    with copies as (
      select
        inv_file_id,
        count(*)
      from
        inv.inv_audits
      group by
        inv_file_id
      having
        count(*) = {{{COPIES}}}
    )
  OBJREPLQLIST: |
    where exists (
      select
        1
      from (
        select
          inio.inv_object_id,
          min(created) as init_created
        from
          inv.inv_nodes_inv_objects inio
        inner join copies
          on copies.inv_object_id = inio.inv_object_id
         group by
          inv_object_id
      ) as age      
      where
        age.init_created < date_add(now(), INTERVAL -? DAY)
      and 
        age.inv_object_id = o.id
    )
  FILEREPLQLIST:
    where exists (
      select
        1
      from (
        select
          a.inv_object_id,
          a.inv_file_id,
          min(created) as init_created
        from
          inv.inv_audits a
        inner join copies
          on copies.inv_file_id = a.inv_file_id
        group by
          inv_object_id,
          inv_file_id
      ) as age      
      where
        age.init_created < date_add(now(), INTERVAL -? DAY)
      and 
        age.inv_object_id = o.id
    )
  REPSQL: |
    select
      case
        when ifnull(c.mnemonic, '') = '' then 'No Mnemonic'
        when c.name = 'Merritt curatorial classes' then 'Stage Exception'
        else 'Default'
      end as category,
      count(*) as num_objs,
      ifnull(
        sum(
          case
            when age.init_created < date_add(now(), INTERVAL -2 DAY) then 1
            else 0
          end
        ),
        0
      ) as num_objs_2day,
      ifnull(
        sum(
          case
            when age.init_created < date_add(now(), INTERVAL -2 DAY) then 0
            when age.init_created < date_add(now(), INTERVAL -1 DAY) then 1
            else 0
          end
        ),
        0
      ) as num_objs_1day,
      ifnull(
        sum(
          case
            when age.init_created < date_add(now(), INTERVAL -2 DAY) then 0
            when age.init_created < date_add(now(), INTERVAL -1 DAY) then 0
            else 1
          end
        ),
        0
      ) as num_objs_0day,
      case
        when count(*) = 0 then 'PASS'
        when {{{COPIES}}} = 3 then 'PASS'
        when ifnull(
          sum(
            case
              when age.init_created < date_add(now(), INTERVAL -2 DAY) then 1
              else 0
            end
          ),
          0
        ) > 0 then
          case
            when c.mnemonic = 'oneshare_dataup' then 'INFO'
            when c.mnemonic = 'dataone_dash' then 'INFO'
            when ifnull(c.mnemonic, '') = '' then 'INFO'
            when {{{COPIES}}} != 2 then 'FAIL'
            else 'FAIL'
          end
        when ifnull(
          sum(
            case
              when age.init_created < date_add(now(), INTERVAL -2 DAY) then 0
              when age.init_created < date_add(now(), INTERVAL -1 DAY) then 1
              else 0
            end
          ),
          0
        ) > 0 then 'WARN'
        else 'PASS'
      end as status
      from (
        select
          inio.inv_object_id,
          min(created) as init_created
        from
          inv.inv_nodes_inv_objects inio
        inner join copies
          on copies.inv_object_id = inio.inv_object_id
        group by
          inv_object_id
      ) as age      
      inner join inv.inv_collections_inv_objects icio
        on age.inv_object_id = icio.inv_object_id
      inner join inv.inv_collections c
        on icio.inv_collection_id = c.id
      inner join inv.inv_objects o
        on c.inv_object_id = o.id and o.aggregate_role = 'MRT-collection'
      group by
        category
  REPSQLFILE: |
    select
      case
        when ifnull(c.mnemonic, '') = ''
          then 'No Mnemonic'
        when age.inv_object_id = (
          select -1 /*id from inv.inv_objects where ark = '...'*/
        )
          then '...'
        when c.name = 'Merritt curatorial classes'
          then 'Stage Exception'
        else
          'Default'
      end as category,
      count(*),
      ifnull(
        sum(
          case
            when age.init_created < date_add(now(), INTERVAL -2 DAY)
              then 1
            else 0
          end
        ),
        0
      ) as num_objs_2day,
      ifnull(
        sum(
          case
            when age.init_created < date_add(now(), INTERVAL -2 DAY)
              then 0
            when age.init_created < date_add(now(), INTERVAL -1 DAY)
              then 1
            else 0
          end
        ),
        0
      ) as num_objs_1day,
      ifnull(
        sum(
          case
            when age.init_created < date_add(now(), INTERVAL -2 DAY)
              then 0
            when age.init_created < date_add(now(), INTERVAL -1 DAY)
              then 0
            else 1
          end
        ),
        0
      ) as num_objs_0day,
      case
        when count(*) = 0 then 'PASS'
        when {{{COPIES}}} = 3 then 'PASS'
        when ifnull(
          sum(
            case
              when age.init_created < date_add(now(), INTERVAL -2 DAY)
                then 1
              else 0
            end
          ),
          0
        ) > 0 then
          case
            when c.mnemonic = 'oneshare_dataup' then 'INFO'
            when c.mnemonic = 'dataone_dash' then 'INFO'
            when ifnull(c.mnemonic, '') = '' then 'INFO'
            when {{{COPIES}}} != 2 then 'FAIL'
            else 'FAIL'
          end
        when ifnull(
          sum(
            case
              when age.init_created < date_add(now(), INTERVAL -2 DAY)
                then 0
              when age.init_created < date_add(now(), INTERVAL -1 DAY)
                then 1
              else 0
            end
          ),
          0
        ) > 0 then 'WARN'
        else 'PASS'
      end as status
    from (
      select
        a.inv_object_id,
        a.inv_file_id,
        min(created) as init_created
      from
        inv.inv_audits a
      inner join copies
        on copies.inv_file_id = a.inv_file_id
      group by
        inv_object_id,
        inv_file_id
    ) as age
    inner join inv.inv_collections_inv_objects icio
      on age.inv_object_id = icio.inv_object_id
    inner join inv.inv_collections c
      on icio.inv_collection_id = c.id
    inner join inv.inv_objects o
      on c.inv_object_id = o.id and o.aggregate_role = 'MRT-collection'
    group by
      category
  MIME: |
    select
      distinct
        ogroup,
        inv_collection_id,
        mnemonic,
        collection_name,
        mime_group,
        mime_type,
        sum(count_files) files,
        sum(billable_size) / 1000000000.0 size_gb
    from
      owner_coll_mime_use_details
    {{{WHERE}}}
    group by
      ogroup,
      inv_collection_id,
      mnemonic,
      collection_name,
      mime_group,
      mime_type
    order by
      ogroup,
      mnemonic
  MULTCOLL:
    where o.id in (
      select
        inv_object_id
      from
        inv.inv_collections_inv_objects
      group by
        inv_object_id
      having
        count(*) > 1
    )
    and
      o.aggregate_role = 'MRT-none'
  MULTCOLLQ:
    select
      year(o.created) as year,
      count(*) as count,
      case
        when year(now()) - year(o.created) <= 1 then 'WARN'
        else 'SKIP'
      end as status
    from
      inv.inv_objects o
    {{{MULTCOLL}}}
    group by
      year
  VERCLOBBER: |
    select
      inv_object_id,
      number,
      count(*)
    from
      inv.inv_versions
    group by
      inv_object_id,
      number
    having
      count(*) > 1
  UNREPLICATED: |
    with unreplicated as (
      select
        p.inv_object_id,
        o.created,
        o.modified
      from
        inv.inv_nodes_inv_objects p
      inner join
        inv.inv_objects o
      on
        o.id = p.inv_object_id
      where
        p.role='primary'
      and
        not exists(
          select
            1
          from
            inv.inv_nodes_inv_objects s
          where
            s.role='secondary'
          and
            p.inv_object_id = s.inv_object_id
          and
            s.version_number = o.version_number
        )
    )
queries:
  /queries/consistency/daily:
    description: |
      This reports shows the set of daily data integrity checks performed by the Merritt system.

      Each of these checks returns a status PASS, INFO, WARN, FAIL, SKIP which is reported in the check_status column. 

      These reports are meant to be reviewed every business day. 

      - PASS: no action required 
      - INFO: the resulting state is not ideal, but no resolution is expected 
      - WARN: this is either an early alert of a future problem or a relatively routine issue.  Action should be taken when possible.
      - FAIL: Immediate action should be taken 
      - SKIP: the status check is not currently applicable

      The checked values are repeated in the status column.  
      
      Any check that is not current (not perfomed since midnight) will report SKIP.

      If you click on a check_name, the test will be re-run and the status will be updated.
    sql: |
      with latest_checks as (
        select 
          dcc.check_name, 
          max(dcc.updated) as last_updated
        from
          daily_consistency_checks dcc
        group by
          dcc.check_name
      )

      select
        dcc.check_name,
        dcc.updated,
        dcc.status as check_status,
        case 
          when updated > date(now()) then dcc.status
          else 'SKIP'
        end as status
      from
        daily_consistency_checks dcc,
        latest_checks as dcclatest
      where 
        dcc.check_name = dcclatest.check_name
      and 
        dcc.updated = dcclatest.last_updated
  /queries/consistency/replication/objects-2:
    status: PASS
    description: |
      This report will query `inv_nodes_inv_objects` to count the number of objects having an irregular number of replicated copies. 
      The Merritt system typically has one primary copy of an object and 2 secondary copies.

      Objects with only 1 or 2 copies likely indicate that replication is in progress or replication failed for the object.
      Objects with more than 3 copies could indicate a misconfiguration of storage nodes for a collection.
      An error captured by this report can often be directly correlated with an error in the ConsistencyFilesQuery report.

      - [Object List: Older than 2 days](/queries/consistency/replication/objects-2/objlist?days=2)
      - [Object List: Older than 1 day](/queries/consistency/replication/objects-2/objlist?days=1)
      - [Object List: Any time](/queries/consistency/replication/objects-2/objlist?days=0)
    template-params:
      COPIES: 2
    status_check: true
    totals: true
    sql: |
      {{{OBJREPLPRE}}}
      {{{REPSQL}}}
  /queries/consistency/replication/objects-2/objlist:
    limit:
      enabled: true
    template-params:
      COPIES: 2
    totals: true
    sql: |
      {{{OBJREPLPRE}}}
      {{{OBJQPRE}}}
      {{{OBJREPLQLIST}}}
      {{{OBJQPOST}}}
    parameters:
    - name: days
      type: integer
  /queries/consistency/replication/objects-1:
    status: PASS
    description: |
      This report will query `inv_nodes_inv_objects` to count the number of objects having an irregular number of replicated copies. 
      The Merritt system typically has one primary copy of an object and 2 secondary copies.

      Objects with only 1 or 2 copies likely indicate that replication is in progress or replication failed for the object.
      Objects with more than 3 copies could indicate a misconfiguration of storage nodes for a collection.
      An error captured by this report can often be directly correlated with an error in the ConsistencyFilesQuery report.

      - [Object List: Older than 2 days](/queries/consistency/replication/objects-1/objlist?days=2)
      - [Object List: Older than 1 day](/queries/consistency/replication/objects-1/objlist?days=1)
      - [Object List: Any time](/queries/consistency/replication/objects-1/objlist?days=0)
    template-params:
      COPIES: 1
    status_check: true
    totals: true
    sql: |
      {{{OBJREPLPRE}}}
      {{{REPSQL}}}
  /queries/consistency/replication/objects-1/objlist:
    limit:
      enabled: true
    template-params:
      COPIES: 1
    totals: true
    sql: |
      {{{OBJREPLPRE}}}
      {{{OBJQPRE}}}
      {{{OBJREPLQLIST}}}
      {{{OBJQPOST}}}
    parameters:
    - name: days
      type: integer
  /queries/consistency/replication/objects-4:
    description: |
      This report will query `inv_nodes_inv_objects` to count the number of objects having an irregular number of replicated copies. 
      The Merritt system typically has one primary copy of an object and 2 secondary copies.

      Objects with only 1 or 2 copies likely indicate that replication is in progress or replication failed for the object.
      Objects with more than 3 copies could indicate a misconfiguration of storage nodes for a collection.
      An error captured by this report can often be directly correlated with an error in the ConsistencyFilesQuery report.

      - [Object List: Older than 2 days](/queries/consistency/replication/objects-4/objlist?days=2)
      - [Object List: Older than 1 day](/queries/consistency/replication/objects-4/objlist?days=1)
      - [Object List: Any time](/queries/consistency/replication/objects-4/objlist?days=0)
    template-params:
      COPIES: 4
    status: PASS
    status_check: true
    totals: true
    sql: |
      {{{OBJREPLPRE}}}
      {{{REPSQL}}}
  /queries/consistency/replication/objects-4/objlist:
    limit:
      enabled: true
    template-params:
      COPIES: 4
    totals: true
    sql: |
      {{{OBJREPLPRE}}}
      {{{OBJQPRE}}}
      {{{OBJREPLQLIST}}}
      {{{OBJQPOST}}}
    parameters:
    - name: days
      type: integer
  /queries/consistency/replication/files-2:
    description: |
      This report will query `inv_audits` to count the number of files having an irregular number of recorded copies. 
      The Merritt system typically has one primary copy of an object and 2 secondary copies.

      Files with only 1 or 2 copies likely indicate that replication is in progress or replication failed for the object.
      Files with more than 3 copies could indicate a misconfiguration of storage nodes for a collection.

      An error captured by this report can often be directly correlated with an error in the ConsistencyObjectsQuery report.
      - [Object List: Older than 2 days](/queries/consistency/replication/files-2/objlist?days=2)
      - [Object List: Older than 1 day](/queries/consistency/replication/files-2/objlist?days=1)
      - [Object List: Any time](/queries/consistency/replication/files-2/objlist?days=0)
    template-params:
      COPIES: 2
    status: PASS
    status_check: true
    totals: true
    sql: |
      {{{FILEREPLPRE}}}
      {{{REPSQLFILE}}}
  /queries/consistency/replication/files-2/objlist:
    limit:
      enabled: true
    template-params:
      COPIES: 2
    totals: true
    sql: |
      {{{FILEREPLPRE}}}
      {{{OBJQPRE}}}
      {{{FILEREPLQLIST}}}
      {{{OBJQPOST}}}
    parameters:
    - name: days
      type: integer
  /queries/consistency/replication/files-1:
    description: |
      This report will query `inv_audits` to count the number of files having an irregular number of recorded copies. 
      The Merritt system typically has one primary copy of an object and 2 secondary copies.

      Files with only 1 or 2 copies likely indicate that replication is in progress or replication failed for the object.
      Files with more than 3 copies could indicate a misconfiguration of storage nodes for a collection.

      An error captured by this report can often be directly correlated with an error in the ConsistencyObjectsQuery report.

      - [Object List: Older than 2 days](/queries/consistency/replication/files-1/objlist?days=2)
      - [Object List: Older than 1 day](/queries/consistency/replication/files-1/objlist?days=1)
      - [Object List: Any time](/queries/consistency/replication/files-1/objlist?days=0)
    template-params:
      COPIES: 1
    status: PASS
    status_check: true
    totals: true
    sql: |
      {{{FILEREPLPRE}}}
      {{{REPSQLFILE}}}
  /queries/consistency/replication/files-1/objlist:
    limit:
      enabled: true
    template-params:
      COPIES: 1
    totals: true
    sql: |
      {{{FILEREPLPRE}}}
      {{{OBJQPRE}}}
      {{{FILEREPLQLIST}}}
      {{{OBJQPOST}}}
    parameters:
    - name: days
      type: integer
  /queries/consistency/replication/files-4:
    description: |
      This report will query `inv_audits` to count the number of files having an irregular number of recorded copies. 
      The Merritt system typically has one primary copy of an object and 2 secondary copies.

      Files with only 1 or 2 copies likely indicate that replication is in progress or replication failed for the object.
      Files with more than 3 copies could indicate a misconfiguration of storage nodes for a collection.

      An error captured by this report can often be directly correlated with an error in the ConsistencyObjectsQuery report.

      - [Object List: Older than 2 days](/queries/consistency/replication/files-4/objlist?days=2)
      - [Object List: Older than 1 day](/queries/consistency/replication/files-4/objlist?days=1)
      - [Object List: Any time](/queries/consistency/replication/files-4/objlist?days=0)
    template-params:
      COPIES: 4
    status: PASS
    status_check: true
    totals: true
    sql: |
      {{{FILEREPLPRE}}}
      {{{REPSQLFILE}}}
  /queries/consistency/replication/files-4/objlist:
    limit:
      enabled: true
    template-params:
      COPIES: 4
    totals: true
    sql: |
      {{{FILEREPLPRE}}}
      {{{OBJQPRE}}}
      {{{FILEREPLQLIST}}}
      {{{OBJQPOST}}}
    parameters:
    - name: days
      type: integer
  /queries/consistency/obj-comp/mult-colls:
    description: |
      Count objects that have been assigned to multiple Merritt collections.
      Objects residing in multiple collections is a legacy Merritt feature.
    status: PASS
    status_check: true
    totals: true
    description: |
      - [Object List](/queries/consistency/obj-comp/mult-colls/objlist)
    sql: |
      {{{MULTCOLLQ}}}
  /queries/consistency/obj-comp/mult-colls/objlist:
    limit:
      enabled: true
    totals: true
    sql: |
      {{{OBJQ}}}
    template-params:
      WHERE: |
        {{{MULTCOLL}}}
  /queries/consistency/obj-comp/version-clobber:
    status: PASS
    status_check: true
    description: |
      Enumerate objects containing irregularities in the `inv_versions` table: Same version number created twice
      This issue has occurred ~170 times in the life of the system.  In most instances, the issue was resolved by rebuilding the inventory record.
      A couple of items required manual reassembly of the inventory record from cloud storage entries.
      The Merritt Team is implementing changes to prevent this issue from occurring in the future.

      - [Object List](/queries/consistency/obj-comp/version-clobber/objlist )
    sql: |
      with gap as (
        select
          inv_object_id
        from
          inv.inv_versions
        group by
          inv_object_id
        having
          count(distinct number) != max(number)
      )

      select
        'Version Clobber (Duplicate Version Num)',
        ifnull(count(distinct inv_object_id), 0),
        case
          when count(*) = 0 then 'PASS'
          else 'FAIL'
        end as status
      from (
        {{{VERCLOBBER}}}
      ) as clobber
      union
      select
        'Version Number Gap',
        ifnull(count(distinct inv_object_id), 0),
        case
          when count(*) = 0 then 'PASS'
          else 'FAIL'
        end as status
      from gap
  /queries/consistency/obj-comp/version-clobber/objlist:
    limit:
      enabled: true
    sql: |
      {{{OBJSUBQ}}}
    template-params:
      SUBWHERE: |
        {{{VERCLOBBER}}}
  /queries/consistency/obj-comp/objects-no-local-id:
    description: |
      This report will examine objects without a localid that seem to expect one based on `inv_objects.erc_where`.

      - Objects older than 1 year will be treated as an INFO.
      - Objects older than 1 month will be treated as a WARN.

      - [Object List](/queries/consistency/obj-comp/objects-no-local-id/objlist)
    status: PASS
    status_check: true
    sql: |
      select
        case
          when modified < date_add(now(), interval -1 YEAR)
            then concat(c.mnemonic, ' - Older Than 1 Year')
          when modified < date_add(now(), interval -1 MONTH)
            then concat(c.mnemonic, ' - Older Than 1 Month')
          else
            c.mnemonic
        end as category,
        count(*),
        case
          when count(*) = 0 then 'PASS'
          when c.mnemonic = 'merritt_demo' then 'INFO'
          when modified < date_add(now(), interval -1 YEAR) then 'INFO'
          when modified < date_add(now(), interval -1 MONTH) then 'WARN'
          else 'FAIL'
        end as status
        from inv.inv_objects o
        inner join inv.inv_collections_inv_objects icio
          on o.id = icio.inv_object_id
        inner join inv.inv_collections c
          on icio.inv_collection_id = c.id
        where
          not exists (select 1 from inv.inv_localids loc where o.ark = loc.inv_object_ark)
          and
            o.erc_where != concat(o.ark, ' ; (:unas)')
        group by
          category
        order by
          category
  /queries/consistency/obj-comp/objects-no-local-id/objlist:
    limit:
      enabled: true
    sql: |
      {{{OBJQ}}}
    template-params:
      WHERE: |
        where not exists (
          select
            1
          from
            inv.inv_localids x
          where
            o.ark = x.inv_object_ark
        )
        and
          erc_where != concat(o.ark, ' ; (:unas)')
  /queries/consistency/obj-comp/local-id-no-ark:
    description: |
      List counts of localids with no corresponding arks.  
      No [resolution](https://github.com/CDLUC3/mrt-doc/issues/1047) has been implemented yet.
    status: PASS
    sql: |
      SELECT
        replace(loc.inv_owner_ark, '%2F', '/') as ownark,
        own.name,
        count(*) as count_ids,
        'INFO' as status
      FROM
        inv.inv_localids loc
      LEFT JOIN
        inv.inv_objects o ON o.ark = loc.inv_object_ark
      LEFT JOIN
        inv.inv_owners own ON replace(loc.inv_owner_ark, '%2F', '/') = own.ark
      WHERE
        o.ark IS null
      group by
        ownark, own.name
  /queries/recent/by-collection:
    description: |
      This report lists the last ingest performed for each Merritt collection.  
      Results are sorted from collection most recently updated to least recently updated.
    sql:
      select
        c.id inv_collection_id,
        c.name,
        c.mnemonic,
        (
          select
            max(o.modified)
          from
            inv.inv_objects o
          inner join inv.inv_collections_inv_objects icio
            on o.id = icio.inv_object_id
          where
            c.id = icio.inv_collection_id
        ) as modified
      from
        inv.inv_collections c
      order by
        modified desc
  /ops/db-queue/replication/required:
    description: |
      This report generates a list of objects requiring replication, based on entries in the `inv_nodes_inv_objects` 
      table that have a primary copy of an object but no secondary copy.
      
      - [Object List: Older than 2 days](/ops/db-queue/replication/required/objlist?days=2)
      - [Object List: Older than 1 day](/ops/db-queue/replication/required/objlist?days=1)
      - [Object List: Any time](/ops/db-queue/replication/required/objlist?days=0)
    status: PASS
    status_check: true
    sql: |
      {{{UNREPLICATED}}}
      select
        case
          when u.inv_object_id = (
            select id from inv.inv_objects where ark = 'ark:/99999/fk4t15qn1'
          )
            then 'Stage Exception'
          else
            'Default'
        end as category,
        count(u.inv_object_id) as obj,
        (select sum(ifnull(os.billable_size,0)) from object_size os where os.inv_object_id = u.inv_object_id) as fbytes,
        ifnull(
          sum(
            case
              when u.modified < date_add(now(), INTERVAL -2 DAY)
                then 1
              else 0
            end
          ),
          0
        ) as day2,
        ifnull(
          sum(
            case
              when u.modified < date_add(now(), INTERVAL -2 DAY)
                then 0
              when u.modified < date_add(now(), INTERVAL -1 DAY)
                then 1
              else 0
            end
          ),
          0
        ) as day1,
        ifnull(
          sum(
            case
              when u.modified < date_add(now(), INTERVAL -2 DAY)
                then 0
              when u.modified < date_add(now(), INTERVAL -1 DAY)
                then 0
              when u.modified is null
                then 0
              else 1
            end
          ),
          0
        ) as day0,
        case
          when count(distinct u.inv_object_id) = 0 then 'PASS'
          when
            sum(
              case
                when u.modified < date_add(now(), INTERVAL -2 DAY)
                  then 1
                else 0
              end
            ) > 0 then 'FAIL'
          when
            sum(
              case
                when u.modified < date_add(now(), INTERVAL -2 DAY)
                  then 0
                when u.modified < date_add(now(), INTERVAL -1 DAY)
                  then 1
                else 0
              end
            ) > 0 then 'WARN'
         else 'PASS'
        end as status
      from unreplicated u
      group by
        category
  /ops/db-queue/replication/required/objlist:
    limit:
      enabled: true
    status: PASS
    sql: |
      {{{UNREPLICATED}}}
      {{{OBJQ}}}
    template-params:
      WHERE: |
        inner join unreplicated u on o.id = u.inv_object_id
        and u.modified < date_add(now(), INTERVAL -? DAY)
    parameters:
    - name: days
      type: integer
  /ops/db-queue/replication/in-progress:
    description: |
      This report generates a list of objects for which replication has been initiated.
      For objects with specific know replication issues, a category can be assigned to an object.

      - *FAIL*: 
        - Replication started more than 24 hours ago .
      - *WARN*: 
        - Replication started more than 4 hours ago.
      - *PASS*: 
        - Replication started less than 4 hours ago.
        - Replication not yet started, it has been less than 4 hours since the object was created/modified.
      - *INFO*: 
        - Known replication exception has been coded into the report
        - Replication not yet started, it has been more than 4 hours since the object was created/modified.
    status: PASS
    status_check: true
    sql: |
      select
        case
          when o.ark in (
            'ark:/13030/m5v45qp2',
            'ark:/13030/j2br86wx',
            'ark:/13030/j21n79mc'
          ) then 'Issue 951 - Admin Object'
          else 'Default'
        end as category,
        inio.inv_object_id,
        o.ark,
        o.version_number,
        o.created,
        inio.replic_start,
        ifnull(inio.replic_size,0) as bytes,
        count(i2.created) as seccnt,
        min(i2.version_number) as secmin,
        max(i2.version_number) as secmax,
        case
          when inio.replic_start is null and o.modified > date_add(now(), INTERVAL -4 HOUR)
            then 'PASS'
          when inio.replic_start is null
            then 'INFO'
          when inio.replic_start > date_add(now(), INTERVAL -4 HOUR)
            then 'PASS'
          when inio.replic_start > date_add(now(), INTERVAL -24 HOUR)
            then 'WARN'
          else 'FAIL'
        end as status
      from
        inv.inv_nodes_inv_objects inio
      inner join
        inv.inv_objects o
      on
        o.id = inio.inv_object_id
      left join
        inv.inv_nodes_inv_objects i2
      on
        inio.inv_object_id = i2.inv_object_id
      and
        i2.role = 'secondary'
      where
        inio.replic_start is not null
      and
        ifnull(inio.replicated, '1970-01-01') < '1971-01-01'
      and
        inio.role = 'primary'
      and
        ifnull(inio.completion_status, 'unknown') = 'unknown'
      group by
        category,
        inio.inv_object_id,
        o.ark,
        o.version_number,
        o.created,
        inio.replic_start,
        bytes,
        status
  /ops/db-queue/replication/failed:
    description: |
      This report generates a list of objects for which replication has failed.
      For objects with specific know replication issues, a category can be assigned to an object.
      If replication has processed for only one node at the time the report is run, the status will report as a WARN.
    status: PASS
    status_check: true
    sql: |
      select
        case
          when o.ark = '...' then '...'
          else 'Default'
        end as category,
        inio.inv_object_id,
        o.ark,
        o.version_number,
        o.created,
        inio.replic_start,
        ifnull(inio.replic_size,0) as bytes,
        inio.completion_status,
        (
          select
            group_concat(n.number)
          from
            inv.inv_nodes n
          inner join
            inv.inv_nodes_inv_objects i2
          on
            i2.inv_node_id = n.id
          where
            i2.role = 'secondary'
          and
            i2.inv_object_id = inio.inv_object_id
          and
            i2.completion_status = 'fail'
        ) as nodes,
        case
          when o.ark = '...' then 'INFO'
          else 'FAIL'
        end as status
      from
        inv.inv_nodes_inv_objects inio
      inner join
        inv.inv_objects o
      on
        o.id = inio.inv_object_id
      where
        inio.replicated is not null
      and
        inio.replicated < '1971-01-01'
      and
        inio.role = 'primary'
      and
        inio.completion_status in ('fail')
      union
      select
        case
          when o.ark = '...' then '...'
          else 'Default'
        end as category,
        inio.inv_object_id,
        o.ark,
        o.version_number,
        o.created,
        inio.replic_start,
        ifnull(inio.replic_size,0) as bytes,
        inio.completion_status,
        (
          select
            group_concat(n.number)
          from
            inv.inv_nodes n
          inner join
            inv.inv_nodes_inv_objects i2
          on
            i2.inv_node_id = n.id
          where
            i2.role = 'secondary'
          and
            i2.inv_object_id = inio.inv_object_id
          and
            i2.completion_status = 'fail'
        ) as nodes,
        case
          when o.ark = '...' then 'INFO'
          else 'WARN'
        end as status
      from
        inv.inv_nodes_inv_objects inio
      inner join
        inv.inv_objects o
      on
        o.id = inio.inv_object_id
      where
        inio.replicated is not null
      and
        inio.replicated < '1971-01-01'
      and
        inio.role = 'primary'
      and
        inio.completion_status in ('partial')
      order by
        replic_start desc
  /ops/db-queue/audit/oldest-audit-check:
    description: |
      Identify the oldest previously audited file in the inventory database.
      - If less than 60 days old, PASS
      - If 60-90 days old, WARN.  Consider adding capacity to the audit service.
      - If more than 90 days, ERROR.  The system is not meeting expectations for active fixity checking.
    status: PASS
    status_check: true
    sql: |
      select
        date(verified) as date,
        case
          when date(verified) < date_add(now(), INTERVAL -90 DAY) then 'FAIL'
          when date(verified) < date_add(now(), INTERVAL -60 DAY) then 'WARN'
          else 'PASS'
        end as status
      from
        inv.inv_audits
      where
        status != 'processing'
      AND NOT
        verified IS null
      order by
        verified
      LIMIT 1
  /ops/db-queue/audit/active-batches:
    description: |
      This report shows the size of the audit queue.  Since the audit service performs database updates to 248 records at a time, 
      the entries in this report will generally be multiples of 248.  If the audit service is not gracefully shutdown, old queue entries will be reported.
      Once these entries are older than 10 hours old, an error will be reported.
      The collection admin tool has an action defined to clear old queue entries from the database.
    status: PASS
    status_check: true
    sql: |
      select
        verified,
        count(a.id) as file_count,
        ifnull(
          sum(
            case
              when a.inv_node_id in (select id from inv.inv_nodes where access_mode != 'on-line')
                then 0
              else full_size
            end
          ),
          0
        ) as online_bytes,
        case
          when verified is null and min(f.created) < date_add(now(), INTERVAL -1 DAY) then 'FAIL'
          when verified is null and min(f.created) < date_add(now(), INTERVAL -10 HOUR) then 'WARN'
          when verified < date_add(now(), INTERVAL -1 DAY) then 'FAIL'
          when verified < date_add(now(), INTERVAL -10 HOUR) then 'WARN'
          else 'PASS'
        end as status
      from
        inv.inv_files f
      inner join inv.inv_audits a
        on
          f.id = a.inv_file_id
        and
          f.inv_object_id = a.inv_object_id
        and
          f.inv_version_id = a.inv_version_id
      where
        status='processing'
      group by
        verified
  /ops/db-queue/audit/counts-by-state:
    description: |
      Count the number of files with an irregular audit status.  

      - For status `unknown` and `processing`, no action is generally required.  These states indicate that an item is being processed.
      - For status `system-unavailable` or `unverified`, a retry is generally recommended.
      - A status of `size-mismatch` or `digest-mismatch` indicates that either a copy error occurred or this could show evidence of bit rot.  Immediate investigation is required.
      - Files with a status of `verified` are explicitly excluded from this report for performance reasons.
    status: PASS
    status_check: true
    sql: |
      select
        'unverified' as astatus,
        acount,
        '' actions,
        case
          when acount > 0 then 'FAIL'
          else 'PASS'
        end as status
      from
        (
          select
            count(*) as acount
          from
            inv.inv_audits
          where
            status = 'unverified'
        ) as qcount
      union
      select
        'size-mismatch' as astatus,
        acount,
        '' actions,
        case
          when acount > 0 then 'FAIL'
          else 'PASS'
        end as status
      from
        (
          select
            count(*) as acount
          from
            inv.inv_audits
          where
            status = 'size-mismatch'
          ) as qcount
      union
      select
        'digest-mismatch' as astatus,
        acount,
        '' actions,
        case
          when acount > 0 then 'FAIL'
          else 'PASS'
        end as status
      from
        (
          select
            count(*) as acount
          from
            inv.inv_audits
          where
            status = 'digest-mismatch'
        ) as qcount
      union
      select
        'system-unavailable' as astatus,
        acount,
        '' actions,
        case
          when acount > 0 then 'WARN'
          else 'PASS'
        end as status
      from
        (
          select
            count(*) as acount
          from
            inv.inv_audits
          where
            status = 'system-unavailable'
        ) as qcount
      union
      select
        'processing' as astatus,
        acount,
        '' actions,
        'PASS' as status
      from
        (
          select
            count(*) as acount
          from
            inv.inv_audits
          where
            status = 'processing'
        ) as qcount
      union
      select
        'unknown' as astatus,
        acount,
        '' actions,
        case
          when acount > 0 then 'PASS'
          else 'PASS'
        end as status
      from
        (
          select
            count(*) as acount
          from
            inv.inv_audits
          where
            status = 'unknown'
        ) as qcount
  /ops/db-queue/audit/counts-by-state/objlist:
    limit:
      enabled: true
    sql: |
      {{{OBJQ}}}
    template-params:
      WHERE: |
        where exists (
          select
            1
          from
            inv.inv_audits a
          where
            o.id = a.inv_object_id
          and
            a.status = ?
        )
    parameters:
    - name: status
      type: string
  /ops/db-queue/audit/new-ucb-content:
    description: |
      Merritt ensures that newly ingested UCB Library content has an immediate fixity check performed on it. 
      Batches of 50 newly ingested objects have their fixity checks reset after 24 hours to ensure that the content is re-verified.
      If an exceptionally large number of objects have been deposited, it may be necessary to manually run the reset process a few times.
    status: PASS
    status_check: true
    sql: |
      select distinct
        o.id inv_object_id,
        o.ark,
        o.modified,
        count(a.id) as files_count,
        max(a.verified) as verified,
        a.status as audit_status,
        case
          when a.status in ('size-mismatch','digest-mismatch', 'unverified') then 'Audit Failed'
          when ifnull(verified, o.modified) < date_add(o.modified, interval {{{wait_hours}}} hour)
            and o.modified > date_add(now(), interval -{{{wait_hours}}} hour)
            then 'Reset Later'
          when a.status = 'verified'
            and ifnull(verified, o.modified) < date_add(o.modified, interval {{{wait_hours}}} hour)
            then 'Reset Needed'
          when a.status = 'verified' then 'Audited'
          else 'In Progress'
        end as category,
        case
          when a.status in ('size-mismatch','digest-mismatch', 'unverified') then 'FAIL'
          when ifnull(verified, o.modified) < date_add(o.modified, interval {{{wait_hours}}} hour)
            and o.modified > date_add(now(), interval -{{{wait_hours}}} hour)
            then 'INFO'
          when a.status = 'verified'
            and ifnull(verified, o.modified) < date_add(o.modified, interval {{{wait_hours}}} hour)
            then 'WARN'
          when a.status = 'verified' then 'PASS'
          else 'INFO'
        end as status
      from
        inv.inv_objects o
      right join
        inv.inv_audits a
      on
        a.inv_object_id = o.id
      and
        a.inv_node_id = 16 /*sdsc node*/
      where
        o.inv_owner_id=14 /*ucb owner*/
      and
        o.modified > date_add(now(), interval -{{{days}}} day)
      group by
        o.id,
        o.ark,
        o.modified,
        a.status
      order by
        o.modified desc
    template-params:
      days: 7
      wait_hours: 24
  /ops/db-queue-update/audit/reset-new-ucb-content:
    status: PASS
    status_check: true
    sql: |
      select distinct
        o.id, o.ark, o.modified, 'PASS' as status
      from
        inv.inv_objects o
      inner join
        inv.inv_audits a
      on
        a.inv_object_id = o.id
      and
        a.inv_node_id = 16 /*sdsc node*/
      where
        o.inv_owner_id=14 /*ucb owner*/
      and
        o.modified > date_add(now(), interval -{{{days}}} day)
      and
        ifnull(verified, o.modified) < date_add(o.modified, interval {{{wait_hours}}} hour)
      and
        o.modified < date_add(now(), interval -{{{wait_hours}}} hour)
      and
        a.status = 'verified'
      order by o.modified
      limit {{{limit}}}
      ;
    template-params:
      days: 7
      wait_hours: 24
      limit: 50
  /ops/collections/db/node-cleanup-needed:
    status: PASS
    sql: |
      select
          icio.inv_collection_id,
          ifnull(c.name, concat('Coll', c.id)) as collection_name,
          n.number node_number,
          count(*) num_objects,
          'FAIL' as status
        from
          inv.inv_nodes_inv_objects inio
        inner join
          inv.inv_collections_inv_objects icio
        on
          inio.inv_object_id = icio.inv_object_id
        inner join
          inv.inv_nodes n
        on
          n.id = inio.inv_node_id
        inner join
          inv.inv_collections c
        on
          c.id = icio.inv_collection_id
        where
          inio.role = 'secondary'
        and
          not exists (
            select
              1
            from
              inv.inv_collections_inv_nodes icin
            where
              icin.inv_collection_id = icio.inv_collection_id
            and
              icin.inv_node_id = inio.inv_node_id
          )
        and exists (
          select
            1
          from
            inv.inv_objects o
          where
            o.id = inio.inv_object_id
          and
            aggregate_role = 'MRT-none'
        )
        group by
          inio.inv_node_id,
          n.number,
          icio.inv_collection_id,
          c.name,
          status
  /ops/collections/db/primary-config:
    description: |
      Report on collections with non-standard primary node configurations.
      Collections that have been configured as "Public Collections" are currently recorded with an INFO status.  
      Eventually, each of these collections will be re-configured to use SDSC as a primary node. 
    status: PASS
    status_check: true
    sql: |
      select
        n.number as nodenum,
        n.description as nodename,
        c.name as collection,
        (
          select
            group_concat(nn.number order by nn.number)
          from
            inv.inv_collections_inv_nodes icin
          inner join
            inv.inv_nodes nn
          on
            icin.inv_node_id = nn.id
          where
            icin.inv_collection_id = c.id
        ),
        case
          when n.number = 4001 then 'SKIP'
          when n.number = 5001 then 'INFO'
          when c.name like 'CDL Wasabi Demo Collection' then 'INFO'
          else 'FAIL'
        end as status
      from
        inv.inv_nodes n
      inner join
        inv.inv_nodes_inv_objects inio
      on
        n.id = inio.inv_node_id
      and
        inio.role = 'primary'
      inner join
        inv.inv_collections_inv_objects icio
      on
        icio.inv_object_id = inio.inv_object_id
      inner join
        inv.inv_collections c
      on
        c.id = icio.inv_collection_id
      inner join
        inv.inv_objects o
      on
        c.inv_object_id = o.id
      and
        o.aggregate_role = 'MRT-collection'
      where
        n.number not in (9501, 9502)
      group by
        nodenum,
        nodename,
        collection
  /ops/collections/db/secondary-config:
    description: |
      Report on collections with non-standard secondary node configurations.
      Current standard configurations for secondary nodes include Glacier and Wasabi, or SDSC and Wasabi.
      - PASS: has standard secondary nodes
      - INFO: known exception (Wasabi test collection, SLA collections)
      - WARN: collection is empty
      - FAIL: collection has content and is not being replicated to a standard set of nodes
    status: PASS
    status_check: true
    sql: |
      with icin as (
        select
          icin.inv_collection_id,
          count(*) as ncount,
          ifnull(group_concat(n.number order by number), '') nodes
        from
          inv.inv_collections_inv_nodes icin
        inner join
          inv.inv_nodes n
        on
          icin.inv_node_id = n.id
        group by
          icin.inv_collection_id
      )
      select
        c.id as collid,
        c.name as collection,
        ifnull(icin.ncount, 0) ncount,
        ifnull(icin.nodes, '') nodes,
        case
          when c.name like 'Merritt %' then 'INFO'
          when lower(c.name) like '%service level agreement%' then 'INFO'
          when c.name like '%SLA' then 'INFO'
          when c.name like 'CDL Wasabi Demo Collection' then 'INFO'
          when (
            select 1 where not exists (
              select 1 from inv.inv_collections_inv_objects icio
              where icio.inv_collection_id = c.id
            )
          ) then 'WARN'
          else 'FAIL'
        end as status
      from
        inv.inv_collections c
      left join icin
      on
        c.id = icin.inv_collection_id
      where not exists (
        select
          1
        from
          inv.inv_objects o
        where
          c.inv_object_id = o.id
        and
          o.aggregate_role = 'MRT-service-level-agreement'
      )
      group by
        collid,
        collection
      having
        nodes not in ('2001,6001', '2001,9501', '2002,6001', '2002,9502')
      order by
        ncount desc, c.name
