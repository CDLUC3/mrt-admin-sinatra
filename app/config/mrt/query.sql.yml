columns:
  names:
    inv_object_id: 
      id: true,
      prefix: '/queries/repository/object?inv_object_id='
      header: Obj ID
    inv_owner_id:
      id: true
    node_number:
      id: true
    year:
      id: true
    collection_name:
      header: Coll Name
    inv_collection_id:
      header: Coll ID
      id: true
      prefix: '/queries/repository/collection?inv_collection_id='
    mnemonic:
      header: Mnemonic
      filterable: true
      id: true
      prefix: '/queries/repository/collection-mnemonic?mnemonic='
    mnemonic_choice:
      header: Mnemonic
      filterable: true
      id: true
      prefix: '?mnemonic='
    mnemonics:
      header: Mnemonic
      filterable: true
      idlist: true
      prefix: '/queries/repository/collection-mnemonic?mnemonic='
    local_ids:
      idlist: true
    ogroup:
      header: Campus
      filterable: true
    mime_group:
      filterable: true
    mime_type:
      filterable: true
    status:
      filterable: true
    own_name:
      filterable: true
    cost:
      cssclass: float
    size:
      cssclass: float
    daily_average_projected_gb:
      cssclass: float
    average_available_gb:
      cssclass: float
    size_gb:
      cssclass: float
    start_size_gb:
      cssclass: float
    ytd_size_gb:
      cssclass: float
    end_size_gb:
      cssclass: float
    diff_size_gb:
      cssclass: float
    bytes_gb:
      cssclass: float
    bytes_gb_per_day:
      cssclass: float
    online_bytes_gb:
      cssclass: float
    s3_bytes_gb:
      cssclass: float
    wasabi_bytes_gb:
      cssclass: float
    sdsc_bytes_gb:
      cssclass: float
  patterns:
    '^\d{4}-\d{2}-\d{2}$':
      cssclass: float
fragments:
  COLLQ: |
    select
      c.id inv_collection_id,
      mnemonic,
      ark collection_ark,
      name,
      count(*) num_objs,
      inio.role as role,
      n.number as node_number,
      n.description as node_description
    from
      inv.inv_collections c
    inner join inv.inv_collections_inv_objects icio
      on c.id = icio.inv_collection_id
    inner join inv.inv_nodes_inv_objects inio
      on icio.inv_object_id = inio.inv_object_id
    inner join inv.inv_nodes n
      on inio.inv_node_id = n.id
    {{{WHERE}}}
    group by
      inv_collection_id,
      mnemonic,
      collection_ark,
      name,
      role,
      node_number,
      node_description
  OBJQ: |
    {{{OBJQPRE}}}
    {{{WHERE}}}
    {{{OBJQPOST}}} 
  OBJSUBQ: |
    {{{OBJQPRE}}}
    where exists (
      select 1
      from (
        {{{SUBWHERE}}}
        limit 25
      ) as q
      where q.inv_object_id = o.id
    )
    {{{OBJQPOST}}} 
  OBJQPRE: |
    select
      o.id inv_object_id,
      o.ark,
      o.version_number,
      group_concat(c.mnemonic) as mnemonics,
      own.name,
      erc_what,
      erc_who,
      erc_when,
      (select group_concat(local_id) from inv.inv_localids loc where loc.inv_object_ark = o.ark and loc.inv_owner_ark = own.ark) as local_ids,
      o.created,
      billable_size,
      file_count
    from
      inv.inv_objects o
    left join inv.inv_collections_inv_objects icio
      on o.id = icio.inv_object_id
    left join inv.inv_collections c
      on icio.inv_collection_id = c.id
    left join inv.inv_owners own
      on o.inv_owner_id = own.id
    left join billing.object_size os 
      on o.id = os.inv_object_id
  OBJQPOST: |
    group by
      inv_object_id,
      o.ark,
      o.version_number,
      own.name,
      erc_what,
      erc_who,
      erc_when,
      created,
      billable_size,
      file_count
    order by o.id desc
      limit 10
  OBJFILES: |
    select
      o.ark,
      v.number,
      (
        select max(vv.number)
        from inv.inv_files ff
        inner join inv.inv_versions vv
          on ff.inv_version_id = vv.id
        where
          ff.inv_object_id = o.id
        and exists (
          select 1 where ff.pathname=f.pathname
        )
      ) as maxv,
      f.source,
      binary f.pathname,
      f.full_size,
      f.created,
      ifnull(group_concat(n.number), '') as nodelist,
      ifnull(
        group_concat(
          case
            when a.status = 'verified' then null
            else n.number
          end
        ),
        ''
      ) as unverified
    from
      inv.inv_objects o
    inner join inv.inv_versions v
      on o.id = v.inv_object_id
    inner join inv.inv_files f
      on o.id = f.inv_object_id
      and v.id = f.inv_version_id
    left join inv.inv_audits a
      on
        o.id = a.inv_object_id
      and
        f.id = a.inv_file_id
    left join inv.inv_nodes n
      on a.inv_node_id = n.id
    {{{WHERE}}}
    and
      f.billable_size = f.full_size
    group by
      o.ark,
      v.number,
      f.source,
      binary f.pathname,
      f.full_size,
      f.created
    order by
      f.created desc,
      source,
      pathname
    limit 2000
  OBJREPL: |
    select
      nn.role,
      nn.node_id,
      nn.node_number,
      nn.description,
      nn.access_mode,
      nn.created,
      nn.replicated,
      (
        select count(*) from inv.inv_audits a
        where a.inv_object_id = nn.inv_object_id and a.inv_node_id=nn.node_id and status != 'verified'
      ) as unverified,
      (
        select max(verified) from inv.inv_audits a
        where a.inv_object_id = nn.inv_object_id and a.inv_node_id=nn.node_id
      ) as last_verified,
      nn.version_number
    from (
      select
        inio.role,
        n.id node_id,
        n.number node_number,
        n.description,
        n.access_mode,
        o.created,
        inio.created as replicated,
        o.id as inv_object_id,
        o.ark as ark,
        o.version_number
      from
        inv.inv_objects o
      inner join inv.inv_nodes_inv_objects inio
        on o.id = inio.inv_object_id
      inner join inv.inv_nodes n
        on inio.inv_node_id = n.id
      {{{WHERE}}}
    ) as nn
  OBJREPLQLIST:
    where exists (
      select
        1
      from (
        select
          inio.inv_object_id,
          min(created) as init_created
        from
          inv.inv_nodes_inv_objects inio
        inner join (
          select
            inv_object_id,
            count(*)
          from
            inv.inv_nodes_inv_objects
          group by
            inv_object_id
          having
            count(*) = {{{COPIES}}}
        ) as copies
        on copies.inv_object_id = inio.inv_object_id
         group by
          inv_object_id
      ) as age      
      where
        age.init_created < date_add(now(), INTERVAL -? DAY)
      and 
        age.inv_object_id = o.id
    )
  FILEREPLQLIST:
    where exists (
      select
        1
      from (
        select
          a.inv_object_id,
          a.inv_file_id,
          min(created) as init_created
        from
          inv.inv_audits a
        inner join (
          select
            inv_file_id,
            count(*)
          from
            inv.inv_audits
          group by
            inv_file_id
          having
            count(*) = {{{COPIES}}}
        ) as copies
          on copies.inv_file_id = a.inv_file_id
        group by
          inv_object_id,
          inv_file_id
      ) as age      
      where
        age.init_created < date_add(now(), INTERVAL -? DAY)
      and 
        age.inv_object_id = o.id
    )
  REPSQL: |
    select
      case
        when ifnull(c.mnemonic, '') = '' then 'No Mnemonic'
        when c.name = 'Merritt curatorial classes' then 'Stage Exception'
        else 'Default'
      end as category,
      count(*) as num_objs,
      ifnull(
        sum(
          case
            when age.init_created < date_add(now(), INTERVAL -2 DAY) then 1
            else 0
          end
        ),
        0
      ) as num_objs_2day,
      ifnull(
        sum(
          case
            when age.init_created < date_add(now(), INTERVAL -2 DAY) then 0
            when age.init_created < date_add(now(), INTERVAL -1 DAY) then 1
            else 0
          end
        ),
        0
      ) as num_objs_1day,
      ifnull(
        sum(
          case
            when age.init_created < date_add(now(), INTERVAL -2 DAY) then 0
            when age.init_created < date_add(now(), INTERVAL -1 DAY) then 0
            else 1
          end
        ),
        0
      ) as num_objs_0day,
      case
        when count(*) = 0 then 'PASS'
        when {{{COPIES}}} = 3 then 'PASS'
        when ifnull(
          sum(
            case
              when age.init_created < date_add(now(), INTERVAL -2 DAY) then 1
              else 0
            end
          ),
          0
        ) > 0 then
          case
            when c.mnemonic = 'oneshare_dataup' then 'INFO'
            when c.mnemonic = 'dataone_dash' then 'INFO'
            when ifnull(c.mnemonic, '') = '' then 'INFO'
            when {{{COPIES}}} != 2 then 'FAIL'
            else 'FAIL'
          end
        when ifnull(
          sum(
            case
              when age.init_created < date_add(now(), INTERVAL -2 DAY) then 0
              when age.init_created < date_add(now(), INTERVAL -1 DAY) then 1
              else 0
            end
          ),
          0
        ) > 0 then 'WARN'
        else 'PASS'
      end as status
      from (
        select
          inio.inv_object_id,
          min(created) as init_created
        from
          inv.inv_nodes_inv_objects inio
        inner join (
          select
            inv_object_id,
            count(*)
          from
            inv.inv_nodes_inv_objects
          group by
            inv_object_id
          having
            count(*) = {{{COPIES}}}
        ) as copies
        on copies.inv_object_id = inio.inv_object_id
        group by
          inv_object_id
      ) as age      
      inner join inv.inv_collections_inv_objects icio
        on age.inv_object_id = icio.inv_object_id
      inner join inv.inv_collections c
        on icio.inv_collection_id = c.id
      inner join inv.inv_objects o
        on c.inv_object_id = o.id and o.aggregate_role = 'MRT-collection'
      group by
        category
  REPSQLFILE: |
    select
      case
        when ifnull(c.mnemonic, '') = ''
          then 'No Mnemonic'
        when age.inv_object_id = (
          select -1 /*id from inv.inv_objects where ark = '...'*/
        )
          then '...'
        when c.name = 'Merritt curatorial classes'
          then 'Stage Exception'
        else
          'Default'
      end as category,
      count(*),
      ifnull(
        sum(
          case
            when age.init_created < date_add(now(), INTERVAL -2 DAY)
              then 1
            else 0
          end
        ),
        0
      ) as num_objs_2day,
      ifnull(
        sum(
          case
            when age.init_created < date_add(now(), INTERVAL -2 DAY)
              then 0
            when age.init_created < date_add(now(), INTERVAL -1 DAY)
              then 1
            else 0
          end
        ),
        0
      ) as num_objs_1day,
      ifnull(
        sum(
          case
            when age.init_created < date_add(now(), INTERVAL -2 DAY)
              then 0
            when age.init_created < date_add(now(), INTERVAL -1 DAY)
              then 0
            else 1
          end
        ),
        0
      ) as num_objs_0day,
      case
        when count(*) = 0 then 'PASS'
        when {{{COPIES}}} = 3 then 'PASS'
        when ifnull(
          sum(
            case
              when age.init_created < date_add(now(), INTERVAL -2 DAY)
                then 1
              else 0
            end
          ),
          0
        ) > 0 then
          case
            when c.mnemonic = 'oneshare_dataup' then 'INFO'
            when c.mnemonic = 'dataone_dash' then 'INFO'
            when ifnull(c.mnemonic, '') = '' then 'INFO'
            when {{{COPIES}}} != 2 then 'FAIL'
            else 'FAIL'
          end
        when ifnull(
          sum(
            case
              when age.init_created < date_add(now(), INTERVAL -2 DAY)
                then 0
              when age.init_created < date_add(now(), INTERVAL -1 DAY)
                then 1
              else 0
            end
          ),
          0
        ) > 0 then 'WARN'
        else 'PASS'
      end as status
    from (
      select
        a.inv_object_id,
        a.inv_file_id,
        min(created) as init_created
      from
        inv.inv_audits a
      inner join (
        select
          inv_file_id,
          count(*)
        from
          inv.inv_audits
        group by
          inv_file_id
        having
          count(*) = {{{COPIES}}}
      ) as copies
        on copies.inv_file_id = a.inv_file_id
      group by
        inv_object_id,
        inv_file_id
    ) as age
    inner join inv.inv_collections_inv_objects icio
      on age.inv_object_id = icio.inv_object_id
    inner join inv.inv_collections c
      on icio.inv_collection_id = c.id
    inner join inv.inv_objects o
      on c.inv_object_id = o.id and o.aggregate_role = 'MRT-collection'
    group by
      category
  MIME:
    select
      distinct
        ogroup,
        inv_collection_id,
        mnemonic,
        collection_name,
        mime_group,
        mime_type,
        sum(count_files) files,
        sum(billable_size) / 1000000000.0 size_gb
    from
      owner_coll_mime_use_details
    {{{WHERE}}}
    group by
      ogroup,
      inv_collection_id,
      mnemonic,
      collection_name,
      mime_group,
      mime_type
    order by
      ogroup,
      mnemonic
  MULTCOLL:
    where o.id in (
      select
        inv_object_id
      from
        inv.inv_collections_inv_objects
      group by
        inv_object_id
      having
        count(*) > 1
    )
    and
      o.aggregate_role = 'MRT-none'
  MULTCOLLQ:
    select
      year(o.created) as year,
      count(*) as count,
      case
        when year(now()) - year(o.created) <= 1 then 'WARN'
        else 'SKIP'
      end as status
    from
      inv.inv_objects o
    {{{MULTCOLL}}}
    group by
      year
  VERCLOBBER: |
    select
      inv_object_id,
      number,
      count(*)
    from
      inv.inv_versions
    group by
      inv_object_id,
      number
    having
      count(*) > 1
  YEARS: |
    select distinct 
      date_add(
        date(created), 
        INTERVAL -(dayofyear(created)) + 1 DAY
      ) start,
      date_add(
        date_add(
          date(created), 
          INTERVAL -(dayofyear(created)) + 1 DAY
        ), 
        INTERVAL +1 YEAR
      ) end 
    from inv.inv_objects
    where created >= date_add(now(), INTERVAL -5 YEAR)
    order by start
  CUMLYEARS: |
    select distinct 
      date_add(
        date_add(
          date_add(
            date_add(date(created), INTERVAL +6 MONTH), 
            INTERVAL -(dayofyear(date_add(date(created), INTERVAL +6 MONTH))) + 1 DAY
          ), 
          INTERVAL -1 YEAR
        ),
        INTERVAL +6 MONTH
      ) start,
      date_add(
        date_add(
          date_add(
            date_add(date(created), INTERVAL +6 MONTH), 
            INTERVAL -(dayofyear(date_add(date(created), INTERVAL +6 MONTH))) + 1 DAY
          ), 
          INTERVAL -1 YEAR
        ),
        INTERVAL +18 MONTH
      ) end
    from inv.inv_objects 
    where created >= date_add(now(), INTERVAL -3 YEAR)
    union
    select distinct 
      date_add(
        date_add(
          date_add(
            date_add(date(max(created)), INTERVAL +6 MONTH), 
            INTERVAL -(dayofyear(date_add(date(max(created)), INTERVAL +6 MONTH))) + 1 DAY
          ), 
          INTERVAL -1 YEAR
        ),
        INTERVAL +18 MONTH
      ) start,
      date_add(
        date_add(
          date_add(
            date_add(date(max(created)), INTERVAL +6 MONTH), 
            INTERVAL -(dayofyear(date_add(date(max(created)), INTERVAL +6 MONTH))) + 1 DAY
          ), 
          INTERVAL -1 YEAR
        ),
        INTERVAL +30 MONTH
      ) end
    from inv.inv_objects 
    union
    select distinct 
      date_add(
        date_add(
          date_add(
            date_add(date(max(created)), INTERVAL +6 MONTH), 
            INTERVAL -(dayofyear(date_add(date(max(created)), INTERVAL +6 MONTH))) + 1 DAY
          ), 
          INTERVAL -1 YEAR
        ),
        INTERVAL +30 MONTH
      ) start,
      date_add(
        date_add(
          date_add(
            date_add(date(max(created)), INTERVAL +6 MONTH), 
            INTERVAL -(dayofyear(date_add(date(max(created)), INTERVAL +6 MONTH))) + 1 DAY
          ), 
          INTERVAL -1 YEAR
        ),
        INTERVAL +42 MONTH
      ) end
    from inv.inv_objects 
    order by start
  WEEKS: |
    select 
      date_add(date(now()), INTERVAL -dayofweek(date(now())) +1 -21 DAY) start,
      date_add(date(now()), INTERVAL -dayofweek(date(now())) +8 -21 DAY) end
    union
    select 
      date_add(date(now()), INTERVAL -dayofweek(date(now())) +1 -14 DAY) start,
      date_add(date(now()), INTERVAL -dayofweek(date(now())) +8 -14 DAY) end
    union
    select 
      date_add(date(now()), INTERVAL -dayofweek(date(now())) +1 -7 DAY) start,
      date_add(date(now()), INTERVAL -dayofweek(date(now())) +8 -7 DAY) end
    union
    select 
      date_add(date(now()), INTERVAL -dayofweek(date(now())) +1 DAY) start,
      date_add(date(now()), INTERVAL -dayofweek(date(now())) +8 DAY) end
  COLLTOTAL: |
    select
      ogroup,
      inv_collection_id,
      mnemonic,
      collection_name,
      {{#RANGE}}
      (
        select 
          {{{FIELD}}} 
        from 
          billing.owner_coll_mime_use_details ocmud
        where 
          ocmud.inv_collection_id = oc.inv_collection_id 
        and 
          ocmud.date_added >= '{{start}}'
        and 
          ocmud.date_added < '{{end}}'
        and
          source = 'producer'
      ) as '{{start}}',
      {{/RANGE}}
      '' as blank
    from 
      billing.owner_collections oc
    where 
    (
      select 
        {{{FIELD}}} 
      from 
        billing.owner_coll_mime_use_details ocmud
      where 
        ocmud.inv_collection_id = oc.inv_collection_id
      and 
        ocmud.date_added >= date_add(now(), INTERVAL -6 YEAR)
      {{{FILTER}}}
    ) > 0
    group by 
      ogroup,
      inv_collection_id,
      mnemonic,
      collection_name
    order by 
      ogroup,
      inv_collection_id,
      mnemonic,
      collection_name
  COLLTOTALCUML: |
    select
      ogroup,
      inv_collection_id,
      mnemonic,
      collection_name,
      {{#RANGE}}
      (
        select 
          {{{FIELD}}}
        from 
          billing.owner_coll_mime_use_details ocmud
        where 
          ocmud.inv_collection_id = oc.inv_collection_id 
        and 
          ocmud.date_added < '{{end}}'
        and
          source = 'producer'
      ) + (
        select
          case 
          when '{{end}}' > now()
            then ifnull(datediff('{{end}}', now()) * {{{FIELD}}} / 730, 0)
            else 0
          end
        from
          owner_coll_mime_use_details ocmud
        where
          oc.ogroup = ocmud.ogroup
        and
          oc.inv_collection_id = ocmud.inv_collection_id
        and
          date_added >= date_add(now(), interval - 730 day)
        and source='producer'
      ) as '{{end}}',
      {{/RANGE}}
      '' as blank
    from 
      billing.owner_collections oc
    where exists
    (
      select 
        {{{FIELD}}} 
      from 
        billing.owner_coll_mime_use_details ocmud
      where 
        ocmud.inv_collection_id = oc.inv_collection_id
    )
    group by 
      ogroup,
      inv_collection_id,
      mnemonic,
      collection_name
    order by 
      ogroup,
      inv_collection_id,
      mnemonic,
      collection_name
  FY2022: |
    select
      '2022-07-01' start,
      '2023-07-01' end,
      max(billing_totals_date) as dytd
    from
      daily_billing
    where
      billing_totals_date < '2023-07-01'
  FY2023: |
    select
      '2023-07-01' start,
      '2024-07-01' end,
      max(billing_totals_date) as dytd
    from
      daily_billing
    where
      billing_totals_date < '2024-07-01'
  FY2024: |
    select
      '2024-07-01' start,
      '2025-07-01' end,
      max(billing_totals_date) as dytd
    from
      daily_billing
    where
      billing_totals_date < '2025-07-01'
  FY2025: |
    select
      '2025-07-01' start,
      '2026-07-01' end,
      max(billing_totals_date) as dytd
    from
      daily_billing
    where
      billing_totals_date < '2026-07-01'
  INVOICE: |
    {{#DATES}}
    select
      own_name,
      mnemonic,
      (
        select
          ifnull(avg(billable_size) / 1000000000.0, 0)
        from
          daily_billing db
        where
          c.inv_collection_id = db.inv_collection_id
        and
          c.inv_owner_id = db.inv_owner_id
        and
          billing_totals_date = '{{start}}'
      ) as start_size_gb,
      (
        select
          ifnull(avg(billable_size) / 1000000000.0, 0)
        from
          daily_billing db
        where
          c.inv_collection_id = db.inv_collection_id
        and
          c.inv_owner_id = db.inv_owner_id
        and
          billing_totals_date = '{{dytd}}'
      ) as ytd_size_gb,
      (
        select
          ifnull(avg(billable_size)  / 1000000000.0, 0)
        from
          daily_billing db
        where
          c.inv_collection_id = db.inv_collection_id
        and
          c.inv_owner_id = db.inv_owner_id
        and
          billing_totals_date = date_add('{{end}}', interval -1 day)
      ) as end_size_gb,
      (
        select ytd_size_gb - start_size_gb
      ) as diff_size_gb,
      (
        select
          count(billable_size)
        from
          daily_billing db
        where
          c.inv_collection_id = db.inv_collection_id
        and
          c.inv_owner_id = db.inv_owner_id
        and
          billing_totals_date >= '{{start}}'
        and
          billing_totals_date <= '{{dytd}}'
      ) as days_available,
      (
        select if(datediff('{{end}}', '{{dytd}}') = 0, 0, datediff('{{end}}', '{{dytd}}') - 1)
      ) as days_projected,
      (
        select
          avg(billable_size) / 1000000000.0
        from
          daily_billing db
        where
          c.inv_collection_id = db.inv_collection_id
        and
          c.inv_owner_id = db.inv_owner_id
        and
          billing_totals_date >= '{{start}}'
        and
          billing_totals_date <= '{{dytd}}'
      ) as average_available_gb,
      (
        select
          (
            (average_available_gb * days_available) + 
            (ytd_size_gb * days_projected)
          ) / datediff('{{end}}', '{{start}}')
      ) as daily_average_projected_gb,
      (
        select daily_average_projected_gb * 365
      ) as size,
      (
        select size * 0.000410959
      ) as cost
    {{/DATES}}
    from
      owner_collections c
    where
      ogroup like '{{{CAMPUS}}}'
    union
    select
      'ZZ Campus 10TB Discount' as own_name,
      null as mnemonic,
      null as start_size_gb,
      null as ytd_size_gb,
      null as end_size_gb,
      null as diff_size_gb,
      null as days_available,
      null as days_projected,
      null as average_available_gb,
      null as daily_average_projected_gb,
      null as size,
      -1500.0 as cost
    order by 
      own_name,
      mnemonic
  REPLACT: |
    {{#DATES}}
    select
      '{{title}}' as title,
      count(inio.inv_object_id) as objs,
      ifnull(sum(inio.replic_size), 0) / 1000000000.0 as bytes_gb,
      datediff(drange.end, drange.start) as days,
      case
        when datediff(drange.end, drange.start) = 0 then 0
        else ifnull(sum(inio.replic_size), 0) / 1000000000.0 / datediff(drange.end, drange.start)
      end as bytes_gb_per_day
    from
      inv.inv_nodes_inv_objects inio,
      (
        select
          '{{start}}' as start,
          '{{end}}' as end
      ) as drange
    where
      replicated >= drange.start
    and
      replicated < drange.end
    {{/DATES}}
  AUDITACT: |
    {{#DATES}}
    select
      '{{title}}' as title,
      status,
      count(*)
    from
      inv.inv_audits
    where
      verified > '{{start}}'
    and
      verified < '{{end}}'
    {{/DATES}}
  LASTMIN: |
    select
      'Last Minute' as title,
      date_add(now(), interval -1 minute) as start,
      now() as end
  LAST5MIN: |
    select
      'Last 5 Minutes' as title,
      date_add(now(), interval -5 minute) as start,
      now() as end
  LASTHOUR: |
    select
      'Last Hour' as title,
      date_add(now(), interval -1 hour) as start,
      now() as end
  SINCEMIDNIGHT: |
    select
      'Since midnight' as title,
      date(now()) start,
      now() as end
  YESTERDAY: |
    select
      'Yesterday' as title,
      date_add(date(now()), INTERVAL -1 DAY) as start,
      date(now()) as end
  2DAYS: |
    select
      '2 Days Ago' as title,
      date_add(date(now()), INTERVAL -2 DAY) as start,
      date_add(date(now()), INTERVAL -1 DAY) as end
  7DAYS: |
    select
      'Last 7 days' as title,
      date_add(now(), INTERVAL -7 DAY) as start,
      now() as end
  30DAYS: |
    select
      'Last 30 days' as title,
      date_add(date(now()), INTERVAL -30 DAY) as start,
      now() as end
  30TO60DAYS: |
    select
      '30 - 60 days ago' as title,
      date_add(date(now()), INTERVAL -60 DAY) as start,
      date_add(date(now()), INTERVAL -30 DAY) as end
  ITER72HOURS: |
    with recursive rnums as (
      select 0 as n
      union all
      select n+1 as n from rnums where n < 71
    )
    select 
      str_to_date(
        date_format(
          date_add(date(now()), interval -rnums.n HOUR),
          '%Y-%m-%d %H:00'
        ),
        '%Y-%m-%d %H:%i:%s'
      ) as start,
      date_add(
        str_to_date(
          date_format(
            date_add(date(now()), interval -rnums.n HOUR),
            '%Y-%m-%d %H:00'
          ),
          '%Y-%m-%d %H:%i:%s'
        ), 
        interval 1 HOUR
      ) as end
    from
      rnums
  ITER30DAYS: |
    with recursive rnums as (
      select 0 as n
      union all
      select n+1 as n from rnums where n < 29
    )
    select 
      date_add(date(now()), interval -rnums.n DAY) as start,
      date_add(date(now()), interval -rnums.n +1 DAY) as end
    from
      rnums
  ITER52WEEKS: |
    with recursive rnums as (
      select 0 as n
      union all
      select n+1 as n from rnums where n < 51
    )
    select 
      date_add(date_add(date(now()), interval -dayofweek(date(now())) + 1 DAY), interval -rnums.n WEEK) as start,
      date_add(date_add(date(now()), interval -dayofweek(date(now())) + 1 DAY), interval -rnums.n +1 WEEK) as end
    from
      rnums
  ITER12MONTHS: |
    with recursive rnums as (
      select 0 as n
      union all
      select n+1 as n from rnums where n < 11
    )
    select 
      date_add(date_add(date(now()), interval -dayofmonth(date(now())) + 1 DAY), interval -rnums.n MONTH) as start,
      date_add(date_add(date(now()), interval -dayofmonth(date(now())) + 1 DAY), interval -rnums.n +1 MONTH) as end
    from
      rnums
  RECENTBYTES: |
    {{#DATES}}
    select
      '{{{start}}}' as start,
      sum(f.billable_size) / 1000000000.0 as size_gb
    from
      inv.inv_files f
    where
      created >= '{{{start}}}'
    and
      created < '{{{end}}}'
    union all
    {{/DATES}}
    select '' start, 0 size_gb where false
    order by 
      start
queries:
  /queries/repository/campus/bytes:
    totals: true
    sql: |
      select
        distinct
        ogroup as campus,
        count(distinct inv_collection_id) num_colls,
        sum(count_files) files,
        sum(billable_size) / 1000000000.0 size_gb
      from
        owner_coll_mime_use_details ocmud
      group by
        ogroup
      order by
        ogroup
  /queries/repository/campus/objects:
    totals: true
    sql: |
      select
        distinct
        ogroup as campus,
        count(distinct inv_collection_id) num_colls,
        sum(count_objects) num_objs
      from
        owner_collections_objects
      group by
        ogroup
      order by
        ogroup
  /queries/repository/collections/bytes:
    totals: true
    sql: |
      select
        distinct
        ogroup,
        inv_collection_id,
        mnemonic,
        collection_name,
        sum(count_files) files,
        sum(billable_size) / 1000000000.0 size_gb
      from
        owner_coll_mime_use_details
      group by
        ogroup,
        inv_collection_id,
        mnemonic,
        collection_name
      order by
        ogroup,
        mnemonic
  /queries/repository/collection:
    sql: |
      {{{COLLQ}}}
    template-params:
      WHERE: where c.id = ?
    parameters:
    - name: inv_collection_id
      type: integer
  /queries/repository/collection-mnemonic:
    sql: |
      {{{COLLQ}}}
    template-params:
      WHERE: where c.mnemonic = ?
    parameters:
    - name: mnemonic
      type: string
  /queries/repository/object:
    sql: |
      {{{OBJQ}}}
    template-params:
      WHERE: where o.id = ?
    files_sql: |
      {{{OBJFILES}}}
    repl_sql: |
      {{{OBJREPL}}}
    parameters:
    - name: inv_object_id
      type: integer
  /queries/repository/object-ark:
    sql: |
      {{{OBJQ}}}
    template-params:
      WHERE: where o.ark = ?
    files_sql: |
      {{{OBJFILES}}}
    repl_sql: |
      {{{OBJREPL}}}
    parameters:
    - name: ark
      type: string
  /queries/recent/objects:
    sql: |
      {{{OBJQ}}}
    template-params:
      WHERE: |
        where o.id >= (select max(id)-10 from inv.inv_objects)
  /queries/repository/objects-localid:
    sql: |
      {{{OBJQ}}}
    template-params:
      WHERE: |
        where exists (
          select 1 from inv.inv_localids loc
          where loc.inv_object_ark = o.ark
          and loc.local_id = ?
        )
    parameters:
    - name: localid
      type: string
  /queries/repository/objects-erc-who:
    sql: |
      {{{OBJQ}}}
    template-params:
      WHERE: |
        where o.erc_who like ?
    parameters:
    - name: term
      type: string
  /queries/repository/objects-erc-what:
    sql: |
      {{{OBJQ}}}
    template-params:
      WHERE: |
        where o.erc_what like ?
    parameters:
    - name: term
      type: string
  /queries/repository/objects-erc-when:
    sql: |
      {{{OBJQ}}}
    template-params:
      WHERE: |
        where o.erc_when like ?
    parameters:
    - name: term
      type: string
  /queries/repository/objects-by-filename:
    sql: |
      {{{OBJQ}}}
    template-params:
      WHERE: |
        where exists (
          select 1 from inv.inv_files f
          where pathname like ?
          and f.inv_object_id = o.id
        )
    parameters:
    - name: term
      type: string
  /queries/repository/objects-by-container:
    sql: |
      {{{OBJQ}}}
    template-params:
      WHERE: |
        where exists (
          select 1 from inv.inv_ingests ing
          where filename = ?
          and ing.inv_object_id = o.id
        )
    parameters:
    - name: term
      type: string
  /queries/repository/collections/objects:
    totals: true
    sql: |
      select
        distinct
        ogroup,
        inv_collection_id,
        (select mnemonic from inv.inv_collections where id=inv_collection_id) mnemonic,
        collection_name,
        sum(count_objects) num_objs
      from
        owner_collections_objects
      group by
        ogroup,
        inv_collection_id,
        mnemonic,
        collection_name
      order by
        ogroup,
        mnemonic
  /queries/repository/owners:
    totals: true
    sql: |
      select
          ogroup,
          inv_owner_id as owner_id,
          own_name,
          (select ark from inv.inv_owners where id=inv_owner_id) owner_ark,
          sum(count_files) files,
          sum(billable_size) / 1000000000.0 size_gb
        from
          owner_coll_mime_use_details
        group by
          ogroup,
          owner_id,
          own_name
        order by
          ogroup,
          own_name
  /queries/consistency/replication/objects-2:
    description: |
      - [Object List: Older than 2 days](/queries/consistency/replication/objects-2/objlist?days=2)
      - [Object List: Older than 1 day](/queries/consistency/replication/objects-2/objlist?days=1)
      - [Object List: Any time](/queries/consistency/replication/objects-2/objlist?days=0)
    template-params:
      COPIES: 2
    totals: true
    sql: |
      {{{REPSQL}}}
  /queries/consistency/replication/objects-2/objlist:
    template-params:
      COPIES: 2
    totals: true
    sql: |
      {{{OBJQPRE}}}
      {{{OBJREPLQLIST}}}
      {{{OBJQPOST}}}
    parameters:
    - name: days
      type: integer
  /queries/consistency/replication/objects-1:
    description: |
      - [Object List: Older than 2 days](/queries/consistency/replication/objects-1/objlist?days=2)
      - [Object List: Older than 1 day](/queries/consistency/replication/objects-1/objlist?days=1)
      - [Object List: Any time](/queries/consistency/replication/objects-1/objlist?days=0)
    template-params:
      COPIES: 1
    totals: true
    sql: |
      {{{REPSQL}}}
  /queries/consistency/replication/objects-1/objlist:
    template-params:
      COPIES: 1
    totals: true
    sql: |
      {{{OBJQPRE}}}
      {{{OBJREPLQLIST}}}
      {{{OBJQPOST}}}
    parameters:
    - name: days
      type: integer
  /queries/consistency/replication/objects-4:
    description: |
      - [Object List: Older than 2 days](/queries/consistency/replication/objects-4/objlist?days=2)
      - [Object List: Older than 1 day](/queries/consistency/replication/objects-4/objlist?days=1)
      - [Object List: Any time](/queries/consistency/replication/objects-4/objlist?days=0)
    template-params:
      COPIES: 4
    totals: true
    sql: |
      {{{REPSQL}}}
  /queries/consistency/replication/objects-4/objlist:
    template-params:
      COPIES: 4
    totals: true
    sql: |
      {{{OBJQPRE}}}
      {{{OBJREPLQLIST}}}
      {{{OBJQPOST}}}
    parameters:
    - name: days
      type: integer
  /queries/consistency/replication/files-2:
    description: |
      - [Object List: Older than 2 days](/queries/consistency/replication/files-2/objlist?days=2)
      - [Object List: Older than 1 day](/queries/consistency/replication/files-2/objlist?days=1)
      - [Object List: Any time](/queries/consistency/replication/files-2/objlist?days=0)
    template-params:
      COPIES: 2
    totals: true
    sql: |
      {{{REPSQLFILE}}}
  /queries/consistency/replication/files-2/objlist:
    template-params:
      COPIES: 2
    totals: true
    sql: |
      {{{OBJQPRE}}}
      {{{FILEREPLQLIST}}}
      {{{OBJQPOST}}}
    parameters:
    - name: days
      type: integer
  /queries/consistency/replication/files-1:
    description: |
      - [Object List: Older than 2 days](/queries/consistency/replication/files-1/objlist?days=2)
      - [Object List: Older than 1 day](/queries/consistency/replication/files-1/objlist?days=1)
      - [Object List: Any time](/queries/consistency/replication/files-1/objlist?days=0)
    template-params:
      COPIES: 1
    totals: true
    sql: |
      {{{REPSQLFILE}}}
  /queries/consistency/replication/files-1/objlist:
    template-params:
      COPIES: 1
    totals: true
    sql: |
      {{{OBJQPRE}}}
      {{{FILEREPLQLIST}}}
      {{{OBJQPOST}}}
    parameters:
    - name: days
      type: integer
  /queries/consistency/replication/files-4:
    description: |
      - [Object List: Older than 2 days](/queries/consistency/replication/files-4/objlist?days=2)
      - [Object List: Older than 1 day](/queries/consistency/replication/files-4/objlist?days=1)
      - [Object List: Any time](/queries/consistency/replication/files-4/objlist?days=0)
    template-params:
      COPIES: 4
    totals: true
    sql: |
      {{{REPSQLFILE}}}
  /queries/consistency/replication/files-4/objlist:
    template-params:
      COPIES: 4
    totals: true
    sql: |
      {{{OBJQPRE}}}
      {{{FILEREPLQLIST}}}
      {{{OBJQPOST}}}
    parameters:
    - name: days
      type: integer
  /queries/repository/mimes/campus/CDL:
    template-params:
      WHERE: where ogroup = CDL
    totals: true
    sql: |
      {{{MIME}}}
  /queries/repository/mimes/campus/UCB:
    template-params:
      WHERE: where ogroup = 'UCB'
    totals: true
    sql: |
      {{{MIME}}}
  /queries/repository/mimes/campus/UCD:
    template-params:
      WHERE: where ogroup = 'UCD'
    totals: true
    sql: |
      {{{MIME}}}
  /queries/repository/mimes/campus/UCI:
    template-params:
      WHERE: where ogroup = 'UCI'
    totals: true
    sql: |
      {{{MIME}}}
  /queries/repository/mimes/campus/UCLA:
    template-params:
      WHERE: where ogroup = 'UCLA'
    totals: true
    sql: |
      {{{MIME}}}
  /queries/repository/mimes/campus/UCM:
    template-params:
      WHERE: where ogroup = 'UCM'
    totals: true
    sql: |
      {{{MIME}}}
  /queries/repository/mimes/campus/UCSB:
    template-params:
      WHERE: where ogroup = 'UCSB'
    totals: true
    sql: |
      {{{MIME}}}
  /queries/repository/mimes/campus/UCSC:
    template-params:
      WHERE: where ogroup = 'UCSC'
    totals: true
    sql: |
      {{{MIME}}}
  /queries/repository/mimes/campus/UCSD:
    template-params:
      WHERE: where ogroup = 'UCSD'
    totals: true
    sql: |
      {{{MIME}}}
  /queries/repository/mimes/campus/UCSF:
    template-params:
      WHERE: where ogroup = 'UCSF'
    totals: true
    sql: |
      {{{MIME}}}
  /queries/repository/mimes/campus/Other:
    template-params:
      WHERE: where ogroup = 'Other'
    totals: true
    sql: |
      {{{MIME}}}
  /queries/repository/mimes/group/audio:
    template-params:
      WHERE: where mime_group = 'audio'
    totals: true
    sql: |
      {{{MIME}}}
  /queries/repository/mimes/group/container:
    template-params:
      WHERE: where mime_group = 'container'
    totals: true
    sql: |
      {{{MIME}}}
  /queries/repository/mimes/group/data:
    template-params:
      WHERE: where mime_group = 'data'
    totals: true
    sql: |
      {{{MIME}}}
  /queries/repository/mimes/group/geo:
    template-params:
      WHERE: where mime_group = 'geo'
    totals: true
    sql: |
      {{{MIME}}}
  /queries/repository/mimes/group/image:
    template-params:
      WHERE: where mime_group = 'image'
    totals: true
    sql: |
      {{{MIME}}}
  /queries/repository/mimes/group/software:
    template-params:
      WHERE: where mime_group = 'software'
    totals: true
    sql: |
      {{{MIME}}}
  /queries/repository/mimes/group/text:
    template-params:
      WHERE: where mime_group = 'textt'
    totals: true
    sql: |
      {{{MIME}}}
  /queries/repository/mimes/group/video:
    template-params:
      WHERE: where mime_group = 'video'
    totals: true
    sql: |
      {{{MIME}}}
  /queries/repository/mimes/group/web:
    template-params:
      WHERE: where mime_group = 'web'
    totals: true
    sql: |
      {{{MIME}}}
  /queries/consistency/obj-comp/mult-colls:
    totals: true
    description: |
      - [Object List](/queries/consistency/obj-comp/mult-colls/objlist)
    sql: |
      {{{MULTCOLLQ}}}
  /queries/consistency/obj-comp/mult-colls/objlist:
    totals: true
    sql: |
      {{{OBJQ}}}
    template-params:
      WHERE: |
        {{{MULTCOLL}}}
  /queries/use-cases/largest-objects:
    totals: true
    sql: |
      {{{OBJSUBQ}}}
    template-params:
      SUBWHERE: |
        select
          inv_object_id
        from
          object_size os
        inner join
          inv.inv_objects oo
        on
          os.inv_object_id = oo.id
        order by
          billable_size desc
  /queries/use-cases/most-files:
    totals: true
    sql: |
      {{{OBJSUBQ}}}
    template-params:
      SUBWHERE: |
        select
          inv_object_id
        from
          object_size os
        inner join
          inv.inv_objects o
        on
          os.inv_object_id = o.id
        order by
          file_count desc
  /queries/use-cases/largest-files:
    totals: true
    sql: |
      {{{OBJSUBQ}}}
    template-params:
      SUBWHERE: |
        select
          inv_object_id
        from
          object_size os
        inner join
          inv.inv_objects o
        on
          os.inv_object_id = o.id
        order by
          max_size desc
  /queries/use-cases/non-ascii-erc-what-mrt-demo:
    totals: true
    sql: |
      {{{OBJSUBQ}}}
    template-params:
      SUBWHERE: |
        select distinct
          o.id as inv_object_id
        from
          inv.inv_objects o
        inner join inv.inv_collections_inv_objects icio
          on o.id = icio.inv_object_id
        inner join inv.inv_collections c
          on icio.inv_collection_id = c.id
        where
          erc_what <> CONVERT(erc_what USING ASCII)
        and
          c.mnemonic = 'mrt-demo'
  /queries/use-cases/long-mime-type-selected-collections:
    totals: true
    sql: |
      {{{OBJSUBQ}}}
    template-params:
      SUBWHERE: |
        select distinct
          o.id as inv_object_id
        from
          inv.inv_objects o
        inner join inv.inv_collections_inv_objects icio
          on o.id = icio.inv_object_id
        inner join inv.inv_collections c
          on icio.inv_collection_id = c.id
        where
          length(mime_type) > 70 and source = 'producer'
        and
          c.mnemonic = 'mrt-demo'
  /queries/use-cases/non-ascii-pathname-mrt-demo:
    totals: true
    sql: |
      {{{OBJSUBQ}}}
    template-params:
      SUBWHERE: |
        select distinct
          f.inv_object_id
        from
          inv.inv_files f
        inner join inv.inv_objects o
          on f.inv_object_id = o.id
        inner join inv.inv_collections_inv_objects icio
          on o.id = icio.inv_object_id
        inner join inv.inv_collections c
          on icio.inv_collection_id = c.id
        where
          pathname <> CONVERT(pathname USING ASCII) and source = 'producer'
        and
          c.mnemonic in (
            'mrt-demo', 'escholarship', 'ucb_lib_cal_cultures', 
            'ucb_lib_dcpp', 'ucb_lib_metcalf', 'ucb_lib_jar',
            'ucb_lib_prechmat', 'ucb_lib_stone_rubbings'
          )
  /queries/use-cases/long-pathname-selected-collections:
    totals: true
    sql: |
      {{{OBJSUBQ}}}
    template-params:
      SUBWHERE: |
        select distinct
          f.inv_object_id
        from
          inv.inv_files f
        inner join inv.inv_objects o
          on f.inv_object_id = o.id
        inner join inv.inv_collections_inv_objects icio
          on o.id = icio.inv_object_id
        inner join inv.inv_collections c
          on icio.inv_collection_id = c.id
        where
          length(SUBSTRING_INDEX(pathname,'/',-1)) > 80 and source = 'producer'
        and
          c.mnemonic in (
            'mrt-demo', 'escholarship', 'ucb_lib_cal_cultures', 
            'ucb_lib_dcpp', 'ucb_lib_metcalf', 'ucb_lib_jar',
            'ucb_lib_prechmat', 'ucb_lib_stone_rubbings'
          )
  /queries/consistency/obj-comp/version-clobber:
    description: |
      - [Object List](/queries/consistency/obj-comp/version-clobber/objlist )
    sql: |
      select
        'Version Clobber (Duplicate Version Num)',
        ifnull(count(distinct inv_object_id), 0),
        case
          when count(*) = 0 then 'PASS'
          else 'FAIL'
        end as status
      from (
        {{{VERCLOBBER}}}
      ) as clobber
      union
      select
        'Version Number Gap',
        ifnull(count(distinct inv_object_id), 0),
        case
          when count(*) = 0 then 'PASS'
          else 'FAIL'
        end as status
      from (
        select
          inv_object_id
        from
          inv.inv_versions
        group by
          inv_object_id
        having
          count(distinct number) != max(number)
      ) as gap
  /queries/consistency/obj-comp/version-clobber/objlist:
    sql: |
      {{{OBJSUBQ}}}
    template-params:
      SUBWHERE: |
        {{{VERCLOBBER}}}
  /queries/consistency/obj-comp/objects-no-local-id:
    description: |
      - [Object List](/queries/consistency/obj-comp/objects-no-local-id/objlist)
    sql: |
      select
        case
          when modified < date_add(now(), interval -1 YEAR)
            then concat(c.mnemonic, ' - Older Than 1 Year')
          when modified < date_add(now(), interval -1 MONTH)
            then concat(c.mnemonic, ' - Older Than 1 Month')
          else
            c.mnemonic
        end as category,
        count(*),
        case
          when count(*) = 0 then 'PASS'
          when c.mnemonic = 'merritt_demo' then 'INFO'
          when modified < date_add(now(), interval -1 YEAR) then 'INFO'
          when modified < date_add(now(), interval -1 MONTH) then 'WARN'
          else 'FAIL'
        end as status
        from inv.inv_objects o
        inner join inv.inv_collections_inv_objects icio
          on o.id = icio.inv_object_id
        inner join inv.inv_collections c
          on icio.inv_collection_id = c.id
        where
          not exists (select 1 from inv.inv_localids loc where o.ark = loc.inv_object_ark)
          and
            o.erc_where != concat(o.ark, ' ; (:unas)')
        group by
          category
        order by
          category
  /queries/consistency/obj-comp/objects-no-local-id/objlist:
    sql: |
      {{{OBJQ}}}
    template-params:
      WHERE: |
        where not exists (
          select
            1
          from
            inv.inv_localids x
          where
            o.ark = x.inv_object_ark
        )
        and
          erc_where != concat(o.ark, ' ; (:unas)')
  /queries/consistency/obj-comp/local-id-no-ark:
    sql: |
      SELECT
        replace(loc.inv_owner_ark, '%2F', '/') as ownark,
        own.name,
        count(*) as count_ids,
        'INFO' as status
      FROM
        inv.inv_localids loc
      LEFT JOIN
        inv.inv_objects o ON o.ark = loc.inv_object_ark
      LEFT JOIN
        inv.inv_owners own ON replace(loc.inv_owner_ark, '%2F', '/') = own.ark
      WHERE
        o.ark IS null
      group by
        ownark, own.name
  /queries/recent/by-collection:
    sql:
      select
        c.id inv_collection_id,
        c.name,
        c.mnemonic,
        (
          select
            max(o.modified)
          from
            inv.inv_objects o
          inner join inv.inv_collections_inv_objects icio
            on o.id = icio.inv_object_id
          where
            c.id = icio.inv_collection_id
        ) as modified
      from
        inv.inv_collections c
      order by
        modified desc
  /queries/repository/last-month/producer-files:
    totals: true
    template-params:
      FIELD: cast(ifnull(sum(ocmud.count_files), 0) as signed)
      FILTER: |
        and 
          ocmud.date_added >= date_add(date(now()), INTERVAL -DAYOFWEEK(date(now())) +1 -21 DAY)
    template-sql:
      RANGE: |
        {{{WEEKS}}}
    sql: |
      {{{COLLTOTAL}}}
  /queries/repository/all-time/producer-files:
    totals: true
    template-params:
      FIELD: cast(sum(ocmud.count_files) as signed)
    template-sql:
      RANGE: |
        {{{YEARS}}}
    sql: |
      {{{COLLTOTAL}}}
  /queries/repository/last-month/file-size:
    totals: true
    template-params:
      FIELD: sum(ocmud.billable_size) / 1000000000.0
      FILTER: |
        and 
          ocmud.date_added >= date_add(date(now()), INTERVAL -DAYOFWEEK(date(now())) +1 -21 DAY)
    template-sql:
      RANGE: |
        {{{WEEKS}}}
    sql: |
      {{{COLLTOTAL}}}
  /queries/repository/all-time/file-size:
    totals: true
    template-params:
      FIELD: sum(ocmud.billable_size) / 1000000000.0
    template-sql:
      RANGE: |
        {{{YEARS}}}
    sql: |
      {{{COLLTOTAL}}}
  /queries/repository/all-time/cuml-file-size:
    totals: true
    template-params:
      FIELD: sum(ocmud.billable_size) / 1000000000.0
    template-sql:
      RANGE: |
        {{{CUMLYEARS}}}
    sql: |
      {{{COLLTOTALCUML}}}
  /queries/repository/campus/invoices/2022/CDL:
    totals: true
    template-params:
      CAMPUS: CDL
    template-sql:
      DATES: |
        {{{FY2022}}}
    sql: |
      {{{INVOICE}}}
  /queries/repository/campus/invoices/2022/UCB:
    totals: true
    template-params:
      CAMPUS: UCB
    template-sql:
      DATES: |
        {{{FY2022}}}
    sql: |
      {{{INVOICE}}}
  /queries/repository/campus/invoices/2022/UCD:
    totals: true
    template-params:
      CAMPUS: UCD
    template-sql:
      DATES: |
        {{{FY2022}}}
    sql: |
      {{{INVOICE}}}
  /queries/repository/campus/invoices/2022/UCI:
    totals: true
    template-params:
      CAMPUS: UCI
    template-sql:
      DATES: |
        {{{FY2022}}}
    sql: |
      {{{INVOICE}}}
  /queries/repository/campus/invoices/2022/UCLA:
    totals: true
    template-params:
      CAMPUS: UCLA
    template-sql:
      DATES: |
        {{{FY2022}}}
    sql: |
      {{{INVOICE}}}
  /queries/repository/campus/invoices/2022/UCM:
    totals: true
    template-params:
      CAMPUS: UCM
    template-sql:
      DATES: |
        {{{FY2022}}}
    sql: |
      {{{INVOICE}}}
  /queries/repository/campus/invoices/2022/UCR:
    totals: true
    template-params:
      CAMPUS: UCR
    template-sql:
      DATES: |
        {{{FY2022}}}
    sql: |
      {{{INVOICE}}}
  /queries/repository/campus/invoices/2022/UCSB:
    totals: true
    template-params:
      CAMPUS: UCSB
    template-sql:
      DATES: |
        {{{FY2022}}}
    sql: |
      {{{INVOICE}}}
  /queries/repository/campus/invoices/2022/UCSC:
    totals: true
    template-params:
      CAMPUS: UCSC
    template-sql:
      DATES: |
        {{{FY2022}}}
    sql: |
      {{{INVOICE}}}
  /queries/repository/campus/invoices/2022/UCSD:
    totals: true
    template-params:
      CAMPUS: UCSD
    template-sql:
      DATES: |
        {{{FY2022}}}
    sql: |
      {{{INVOICE}}}
  /queries/repository/campus/invoices/2022/UCSF:
    totals: true
    template-params:
      CAMPUS: UCSF
    template-sql:
      DATES: |
        {{{FY2022}}}
    sql: |
      {{{INVOICE}}}
  /queries/repository/campus/invoices/2022/Other:
    totals: true
    template-params:
      CAMPUS: Other
    template-sql:
      DATES: |
        {{{FY2022}}}
    sql: |
      {{{INVOICE}}}
  /queries/repository/campus/invoices/2023/CDL:
    totals: true
    template-params:
      CAMPUS: CDL
    template-sql:
      DATES: |
        {{{FY2023}}}
    sql: |
      {{{INVOICE}}}
  /queries/repository/campus/invoices/2023/UCB:
    totals: true
    template-params:
      CAMPUS: UCB
    template-sql:
      DATES: |
        {{{FY2023}}}
    sql: |
      {{{INVOICE}}}
  /queries/repository/campus/invoices/2023/UCD:
    totals: true
    template-params:
      CAMPUS: UCD
    template-sql:
      DATES: |
        {{{FY2023}}}
    sql: |
      {{{INVOICE}}}
  /queries/repository/campus/invoices/2023/UCI:
    totals: true
    template-params:
      CAMPUS: UCI
    template-sql:
      DATES: |
        {{{FY2023}}}
    sql: |
      {{{INVOICE}}}
  /queries/repository/campus/invoices/2023/UCLA:
    totals: true
    template-params:
      CAMPUS: UCLA
    template-sql:
      DATES: |
        {{{FY2023}}}
    sql: |
      {{{INVOICE}}}
  /queries/repository/campus/invoices/2023/UCM:
    totals: true
    template-params:
      CAMPUS: UCM
    template-sql:
      DATES: |
        {{{FY2023}}}
    sql: |
      {{{INVOICE}}}
  /queries/repository/campus/invoices/2023/UCR:
    totals: true
    template-params:
      CAMPUS: UCR
    template-sql:
      DATES: |
        {{{FY2023}}}
    sql: |
      {{{INVOICE}}}
  /queries/repository/campus/invoices/2023/UCSB:
    totals: true
    template-params:
      CAMPUS: UCSB
    template-sql:
      DATES: |
        {{{FY2023}}}
    sql: |
      {{{INVOICE}}}
  /queries/repository/campus/invoices/2023/UCSC:
    totals: true
    template-params:
      CAMPUS: UCSC
    template-sql:
      DATES: |
        {{{FY2023}}}
    sql: |
      {{{INVOICE}}}
  /queries/repository/campus/invoices/2023/UCSD:
    totals: true
    template-params:
      CAMPUS: UCSD
    template-sql:
      DATES: |
        {{{FY2023}}}
    sql: |
      {{{INVOICE}}}
  /queries/repository/campus/invoices/2023/UCSF:
    totals: true
    template-params:
      CAMPUS: UCSF
    template-sql:
      DATES: |
        {{{FY2023}}}
    sql: |
      {{{INVOICE}}}
  /queries/repository/campus/invoices/2023/Other:
    totals: true
    template-params:
      CAMPUS: Other
    template-sql:
      DATES: |
        {{{FY2023}}}
    sql: |
      {{{INVOICE}}}
  /queries/repository/campus/invoices/2024/CDL:
    totals: true
    template-params:
      CAMPUS: CDL
    template-sql:
      DATES: |
        {{{FY2024}}}
    sql: |
      {{{INVOICE}}}
  /queries/repository/campus/invoices/2024/UCB:
    totals: true
    template-params:
      CAMPUS: UCB
    template-sql:
      DATES: |
        {{{FY2024}}}
    sql: |
      {{{INVOICE}}}
  /queries/repository/campus/invoices/2024/UCD:
    totals: true
    template-params:
      CAMPUS: UCD
    template-sql:
      DATES: |
        {{{FY2024}}}
    sql: |
      {{{INVOICE}}}
  /queries/repository/campus/invoices/2024/UCI:
    totals: true
    template-params:
      CAMPUS: UCI
    template-sql:
      DATES: |
        {{{FY2024}}}
    sql: |
      {{{INVOICE}}}
  /queries/repository/campus/invoices/2024/UCLA:
    totals: true
    template-params:
      CAMPUS: UCLA
    template-sql:
      DATES: |
        {{{FY2024}}}
    sql: |
      {{{INVOICE}}}
  /queries/repository/campus/invoices/2024/UCM:
    totals: true
    template-params:
      CAMPUS: UCM
    template-sql:
      DATES: |
        {{{FY2024}}}
    sql: |
      {{{INVOICE}}}
  /queries/repository/campus/invoices/2024/UCR:
    totals: true
    template-params:
      CAMPUS: UCR
    template-sql:
      DATES: |
        {{{FY2024}}}
    sql: |
      {{{INVOICE}}}
  /queries/repository/campus/invoices/2024/UCSB:
    totals: true
    template-params:
      CAMPUS: UCSB
    template-sql:
      DATES: |
        {{{FY2024}}}
    sql: |
      {{{INVOICE}}}
  /queries/repository/campus/invoices/2024/UCSC:
    totals: true
    template-params:
      CAMPUS: UCSC
    template-sql:
      DATES: |
        {{{FY2024}}}
    sql: |
      {{{INVOICE}}}
  /queries/repository/campus/invoices/2024/UCSD:
    totals: true
    template-params:
      CAMPUS: UCSD
    template-sql:
      DATES: |
        {{{FY2024}}}
    sql: |
      {{{INVOICE}}}
  /queries/repository/campus/invoices/2024/UCSF:
    totals: true
    template-params:
      CAMPUS: UCSF
    template-sql:
      DATES: |
        {{{FY2024}}}
    sql: |
      {{{INVOICE}}}
  /queries/repository/campus/invoices/2024/Other:
    totals: true
    template-params:
      CAMPUS: Other
    template-sql:
      DATES: |
        {{{FY2024}}}
    sql: |
      {{{INVOICE}}}
  /queries/recent/ingests:
    sql: |
      select
        profile,
        batch_id,
        max(submitted) date_submitted,
        count(*) as object_count,
        ifnull(sum(os.billable_size), 0) as total_size,
        ifnull(sum(os.file_count), 0) as total_files
      from
        inv.inv_ingests ing
      left join billing.object_size os
        on ing.inv_object_id = os.inv_object_id
      where
        date(submitted) = ?
      group by
        profile,
        batch_id
      order by
        max(submitted) desc
    parameters:
    - name: date
      type: date
  /queries/recent/bytes-by-hour:
    totals: true
    template-sql: 
      DATES: |
        {{{ITER72HOURS}}}
    sql: |
      {{{RECENTBYTES}}}
  /queries/recent/bytes-by-day:
    totals: true
    template-sql: 
      DATES: |
        {{{ITER30DAYS}}}
    sql: |
      {{{RECENTBYTES}}}
  /queries/recent/bytes-by-week:
    totals: true
    template-sql: 
      DATES: |
        {{{ITER52WEEKS}}}
    sql: |
      {{{RECENTBYTES}}}
  /queries/recent/bytes-by-month:
    totals: true
    template-sql: 
      DATES: |
        {{{ITER12MONTHS}}}
    sql: |
      {{{RECENTBYTES}}}
  /queries/recent/bytes-by-years:
    sql: |
      select 
        distinct date_add(date(date_added), interval -dayofyear(date(date_added)) + 1 DAY) as start,
        sum(f.billable_size) / 1000000000.0 as size_gb
      from
        billing.owner_coll_mime_use_details f
      group by
        start
      order by 
        start
  /ops/db-queue/replication/required:
    sql: |
      select
        case
          when u.inv_object_id = (
            select id from inv.inv_objects where ark = 'ark:/99999/fk4t15qn1'
          )
            then 'Stage Exception'
          else
            'Default'
        end as category,
        count(u.inv_object_id) as obj,
        (select sum(ifnull(os.billable_size,0)) from object_size os where os.inv_object_id = u.inv_object_id) as fbytes,
        ifnull(
          sum(
            case
              when u.modified < date_add(now(), INTERVAL -2 DAY)
                then 1
              else 0
            end
          ),
          0
        ) as day2,
        ifnull(
          sum(
            case
              when u.modified < date_add(now(), INTERVAL -2 DAY)
                then 0
              when u.modified < date_add(now(), INTERVAL -1 DAY)
                then 1
              else 0
            end
          ),
          0
        ) as day1,
        ifnull(
          sum(
            case
              when u.modified < date_add(now(), INTERVAL -2 DAY)
                then 0
              when u.modified < date_add(now(), INTERVAL -1 DAY)
                then 0
              when u.modified is null
                then 0
              else 1
            end
          ),
          0
        ) as day0,
        case
          when count(distinct u.inv_object_id) = 0 then 'PASS'
          when
            sum(
              case
                when u.modified < date_add(now(), INTERVAL -2 DAY)
                  then 1
                else 0
              end
            ) > 0 then 'FAIL'
          when
            sum(
              case
                when u.modified < date_add(now(), INTERVAL -2 DAY)
                  then 0
                when u.modified < date_add(now(), INTERVAL -1 DAY)
                  then 1
                else 0
              end
            ) > 0 then 'WARN'
         else 'PASS'
        end as status
      from (
        select
          p.inv_object_id,
          o.created,
          o.modified
        from
          inv.inv_nodes_inv_objects p
        inner join
          inv.inv_objects o
        on
          o.id = p.inv_object_id
        where
          p.role='primary'
        and
          not exists(
            select
              1
            from
              inv.inv_nodes_inv_objects s
            where
              s.role='secondary'
            and
              p.inv_object_id = s.inv_object_id
            and
              s.version_number = o.version_number
          )
      ) as u
      group by
        category
  /ops/db-queue/replication/in-progress:
    sql: |
      select
        case
          when o.ark in (
            'ark:/13030/m5v45qp2',
            'ark:/13030/j2br86wx',
            'ark:/13030/j21n79mc'
          ) then 'Issue 951 - Admin Object'
          else 'Default'
        end as category,
        inio.inv_object_id,
        o.ark,
        o.version_number,
        o.created,
        inio.replic_start,
        ifnull(inio.replic_size,0) as bytes,
        count(i2.created) as seccnt,
        min(i2.version_number) as secmin,
        max(i2.version_number) as secmax,
        case
          when inio.replic_start is null and o.modified > date_add(now(), INTERVAL -4 HOUR)
            then 'PASS'
          when inio.replic_start is null
            then 'INFO'
          when inio.replic_start > date_add(now(), INTERVAL -4 HOUR)
            then 'PASS'
          when inio.replic_start > date_add(now(), INTERVAL -24 HOUR)
            then 'WARN'
          else 'FAIL'
        end as status
      from
        inv.inv_nodes_inv_objects inio
      inner join
        inv.inv_objects o
      on
        o.id = inio.inv_object_id
      left join
        inv.inv_nodes_inv_objects i2
      on
        inio.inv_object_id = i2.inv_object_id
      and
        i2.role = 'secondary'
      where
        inio.replic_start is not null
      and
        ifnull(inio.replicated, '1970-01-01') < '1971-01-01'
      and
        inio.role = 'primary'
      and
        ifnull(inio.completion_status, 'unknown') = 'unknown'
      group by
        category,
        inio.inv_object_id,
        o.ark,
        o.version_number,
        o.created,
        inio.replic_start,
        bytes,
        status
  /ops/db-queue/replication/failed:
    sql: |
      select
        case
          when o.ark = '...' then '...'
          else 'Default'
        end as category,
        inio.inv_object_id,
        o.ark,
        o.version_number,
        o.created,
        inio.replic_start,
        ifnull(inio.replic_size,0) as bytes,
        inio.completion_status,
        (
          select
            group_concat(n.number)
          from
            inv.inv_nodes n
          inner join
            inv.inv_nodes_inv_objects i2
          on
            i2.inv_node_id = n.id
          where
            i2.role = 'secondary'
          and
            i2.inv_object_id = inio.inv_object_id
          and
            i2.completion_status = 'fail'
        ) as nodes,
        case
          when o.ark = '...' then 'INFO'
          else 'FAIL'
        end as status
      from
        inv.inv_nodes_inv_objects inio
      inner join
        inv.inv_objects o
      on
        o.id = inio.inv_object_id
      where
        inio.replicated is not null
      and
        inio.replicated < '1971-01-01'
      and
        inio.role = 'primary'
      and
        inio.completion_status in ('fail')
      union
      select
        case
          when o.ark = '...' then '...'
          else 'Default'
        end as category,
        inio.inv_object_id,
        o.ark,
        o.version_number,
        o.created,
        inio.replic_start,
        ifnull(inio.replic_size,0) as bytes,
        inio.completion_status,
        (
          select
            group_concat(n.number)
          from
            inv.inv_nodes n
          inner join
            inv.inv_nodes_inv_objects i2
          on
            i2.inv_node_id = n.id
          where
            i2.role = 'secondary'
          and
            i2.inv_object_id = inio.inv_object_id
          and
            i2.completion_status = 'fail'
        ) as nodes,
        case
          when o.ark = '...' then 'INFO'
          else 'WARN'
        end as status
      from
        inv.inv_nodes_inv_objects inio
      inner join
        inv.inv_objects o
      on
        o.id = inio.inv_object_id
      where
        inio.replicated is not null
      and
        inio.replicated < '1971-01-01'
      and
        inio.role = 'primary'
      and
        inio.completion_status in ('partial')
      order by
        replic_start desc
  /ops/db-queue/replication/activity/last-min:
    sql: |
      {{{REPLACT}}}
    template-sql:
      DATES: |
        {{{LASTMIN}}}
  /ops/db-queue/replication/activity/last-5min:
    sql: |
      {{{REPLACT}}}
    template-sql:
      DATES: |
        {{{LAST5MIN}}}
  /ops/db-queue/replication/activity/last-hour:
    sql: |
      {{{REPLACT}}}
    template-sql:
      DATES: |
        {{{LASTHOUR}}}
  /ops/db-queue/replication/activity/since-midnight:
    sql: |
      {{{REPLACT}}}
    template-sql:
      DATES: |
        {{{SINCEMIDNIGHT}}}
  /ops/db-queue/replication/activity/yesterday:
    sql: |
      {{{REPLACT}}}
    template-sql:
      DATES: |
        {{{YESTERDAY}}}
  /ops/db-queue/replication/activity/2days-ago:
    sql: |
      {{{REPLACT}}}
    template-sql:
      DATES: |
        {{{2DAYS}}}
  /ops/db-queue/replication/activity/7days:
    sql: |
      {{{REPLACT}}}
    template-sql:
      DATES: |
        {{{7DAYS}}}
  /ops/db-queue/replication/activity/30days:
    sql: |
      {{{REPLACT}}}
    template-sql:
      DATES: |
        {{{30DAYS}}}
  /ops/db-queue/replication/activity/30-60-days-ago:
    sql: |
      {{{REPLACT}}}
    template-sql:
      DATES: |
        {{{30TO60DAYS}}}
  /ops/db-queue/audit/oldest-audit-check:
    sql: |
      select
        date(verified) as date,
        case
          when date(verified) < date_add(now(), INTERVAL -90 DAY) then 'FAIL'
          when date(verified) < date_add(now(), INTERVAL -60 DAY) then 'WARN'
          else 'PASS'
        end as status
      from
        inv.inv_audits
      where
        status != 'processing'
      AND NOT
        verified IS null
      order by
        verified
      LIMIT 1
  /ops/db-queue/audit/active-batches:
    sql: |
      select
        verified,
        count(a.id) as file_count,
        ifnull(
          sum(
            case
              when a.inv_node_id in (select id from inv.inv_nodes where access_mode != 'on-line')
                then 0
              else full_size
            end
          ),
          0
        ) as online_bytes,
        case
          when verified is null and min(f.created) < date_add(now(), INTERVAL -1 DAY) then 'FAIL'
          when verified is null and min(f.created) < date_add(now(), INTERVAL -10 HOUR) then 'WARN'
          when verified < date_add(now(), INTERVAL -1 DAY) then 'FAIL'
          when verified < date_add(now(), INTERVAL -10 HOUR) then 'WARN'
          else 'PASS'
        end as status
      from
        inv.inv_files f
      inner join inv.inv_audits a
        on
          f.id = a.inv_file_id
        and
          f.inv_object_id = a.inv_object_id
        and
          f.inv_version_id = a.inv_version_id
      where
        status='processing'
      group by
        verified
  /ops/db-queue/audit/counts-by-state:
    sql: |
      select
        'unverified' as astatus,
        acount,
        case
          when acount > 0 then 'FAIL'
          else 'PASS'
        end as status
      from
        (
          select
            count(*) as acount
          from
            inv.inv_audits
          where
            status = 'unverified'
        ) as qcount
      union
      select
        'size-mismatch' as astatus,
        acount,
        case
          when acount > 0 then 'FAIL'
          else 'PASS'
        end as status
      from
        (
          select
            count(*) as acount
          from
            inv.inv_audits
          where
            status = 'size-mismatch'
          ) as qcount
      union
      select
        'digest-mismatch' as astatus,
        acount,
        case
          when acount > 0 then 'FAIL'
          else 'PASS'
        end as status
      from
        (
          select
            count(*) as acount
          from
            inv.inv_audits
          where
            status = 'digest-mismatch'
        ) as qcount
      union
      select
        'system-unavailable' as astatus,
        acount,
        case
          when acount > 0 then 'WARN'
          else 'PASS'
        end as status
      from
        (
          select
            count(*) as acount
          from
            inv.inv_audits
          where
            status = 'system-unavailable'
        ) as qcount
      union
      select
        'processing' as astatus,
        acount,
        'PASS' as status
      from
        (
          select
            count(*) as acount
          from
            inv.inv_audits
          where
            status = 'processing'
        ) as qcount
      union
      select
        'unknown' as astatus,
        acount,
        case
          when acount > 0 then 'PASS'
          else 'PASS'
        end as status
      from
        (
          select
            count(*) as acount
          from
            inv.inv_audits
          where
            status = 'unknown'
        ) as qcount
  /ops/db-queue/audit/activity/last-min:
    sql: |
      {{{AUDITACT}}}
    template-sql:
      DATES: |
        {{{LASTMIN}}}
  /ops/db-queue/audit/activity/last-5min:
    sql: |
      {{{AUDITACT}}}
    template-sql:
      DATES: |
        {{{LAST5MIN}}}
  /ops/db-queue/audit/activity/last-hour:
    sql: |
      {{{AUDITACT}}}
    template-sql:
      DATES: |
        {{{LASTHOUR}}}
  /ops/db-queue/audit/activity/since-midnight:
    sql: |
      {{{AUDITACT}}}
    template-sql:
      DATES: |
        {{{SINCEMIDNIGHT}}}
  /ops/db-queue/audit/activity/yesterday:
    sql: |
      {{{AUDITACT}}}
    template-sql:
      DATES: |
        {{{YESTERDAY}}}
  /ops/db-queue/audit/activity/2days-ago:
    sql: |
      {{{AUDITACT}}}
    template-sql:
      DATES: |
        {{{2DAYS}}}
  /ops/db-queue/audit/activity/7days:
    sql: |
      {{{AUDITACT}}}
    template-sql:
      DATES: |
        {{{7DAYS}}}
  /ops/db-queue/audit/activity/30days:
    sql: |
      {{{AUDITACT}}}
    template-sql:
      DATES: |
        {{{30DAYS}}}
  /ops/db-queue/audit/activity/30-60-days-ago:
    sql: |
      {{{AUDITACT}}}
    template-sql:
      DATES: |
        {{{30TO60DAYS}}}
  /ops/db-queue/audit/30-days:
    sql: |
      select
        audit_date,
        all_files,
        online_files,
        online_bytes / 1000000000.0 as online_bytes_gb,
        s3_files,
        s3_bytes / 1000000000.0 as s3_bytes_gb,
        glacier_files,
        sdsc_files,
        sdsc_bytes / 1000000000.0 as sdsc_bytes_gb,
        wasabi_files,
        wasabi_bytes / 1000000000.0 as wasabi_bytes_gb,
        case
          when (all_files > 2300000 and online_bytes > 12000000000000)
            then 'PASS'
          when (all_files > 1550000 and online_bytes >  8000000000000)
            then 'INFO'
          when (all_files < 1550000 and online_bytes <  8000000000000)
            then 'FAIL'
          when (audit_date < date_add(now(), INTERVAL -6 DAY))
            then 'INFO'
          else 'WARN'
        end as status
      from
        audits_processed
      where
        audit_date > date_add(now(), INTERVAL -30 DAY)
      order by
        audit_date desc
  /ops/collections/db/node-cleanup-needed:
    sql: |
      select
          icio.inv_collection_id,
          ifnull(c.name, concat('Coll', c.id)) as collection_name,
          n.number node_number,
          count(*) num_objects,
          'FAIL' as status
        from
          inv.inv_nodes_inv_objects inio
        inner join
          inv.inv_collections_inv_objects icio
        on
          inio.inv_object_id = icio.inv_object_id
        inner join
          inv.inv_nodes n
        on
          n.id = inio.inv_node_id
        inner join
          inv.inv_collections c
        on
          c.id = icio.inv_collection_id
        where
          inio.role = 'secondary'
        and
          not exists (
            select
              1
            from
              inv.inv_collections_inv_nodes icin
            where
              icin.inv_collection_id = icio.inv_collection_id
            and
              icin.inv_node_id = inio.inv_node_id
          )
        and exists (
          select
            1
          from
            inv.inv_objects o
          where
            o.id = inio.inv_object_id
          and
            aggregate_role = 'MRT-none'
        )
        group by
          inio.inv_node_id,
          n.number,
          icio.inv_collection_id,
          c.name,
          status
  /ops/collections/db/primary-config:
    sql: |
      select
        n.number as nodenum,
        n.description as nodename,
        c.name as collection,
        (
          select
            group_concat(nn.number order by nn.number)
          from
            inv.inv_collections_inv_nodes icin
          inner join
            inv.inv_nodes nn
          on
            icin.inv_node_id = nn.id
          where
            icin.inv_collection_id = c.id
        ),
        case
          when n.number = 4001 then 'SKIP'
          when n.number = 5001 then 'INFO'
          when c.name like 'CDL Wasabi Demo Collection' then 'INFO'
          else 'FAIL'
        end as status
      from
        inv.inv_nodes n
      inner join
        inv.inv_nodes_inv_objects inio
      on
        n.id = inio.inv_node_id
      and
        inio.role = 'primary'
      inner join
        inv.inv_collections_inv_objects icio
      on
        icio.inv_object_id = inio.inv_object_id
      inner join
        inv.inv_collections c
      on
        c.id = icio.inv_collection_id
      inner join
        inv.inv_objects o
      on
        c.inv_object_id = o.id
      and
        o.aggregate_role = 'MRT-collection'
      where
        n.number not in (9501, 9502)
      group by
        nodenum,
        nodename,
        collection
  /ops/collections/db/secondary-config:
    sql: |
      select
        c.id as collid,
        c.name as collection,
        ifnull(icin.ncount, 0) ncount,
        ifnull(icin.nodes, '') nodes,
        case
          when c.name like 'Merritt %' then 'INFO'
          when lower(c.name) like '%service level agreement%' then 'INFO'
          when c.name like '%SLA' then 'INFO'
          when c.name like 'CDL Wasabi Demo Collection' then 'INFO'
          when (
            select 1 where not exists (
              select 1 from inv.inv_collections_inv_objects icio
              where icio.inv_collection_id = c.id
            )
          ) then 'WARN'
          else 'FAIL'
        end as status
      from
        inv.inv_collections c
      left join (
        select
          icin.inv_collection_id,
          count(*) as ncount,
          ifnull(group_concat(n.number order by number), '') nodes
        from
          inv.inv_collections_inv_nodes icin
        inner join
          inv.inv_nodes n
        on
          icin.inv_node_id = n.id
        group by
          icin.inv_collection_id
      ) icin
      on
        c.id = icin.inv_collection_id
      where not exists (
        select
          1
        from
          inv.inv_objects o
        where
          c.inv_object_id = o.id
        and
          o.aggregate_role = 'MRT-service-level-agreement'
      )
      group by
        collid,
        collection
      having
        nodes not in ('2001,6001', '2001,9501', '2002,6001', '2002,9502')
      order by
        ncount desc, c.name
  /ops/storage/db/nodes:
    sql: |
      select
        n.number as node_number,
        n.description,
        nc.object_count as object_count,
        nc.object_count_primary,
        nc.object_count_secondary,
        nc.file_count,
        nc.billable_size / 1000000000.0 as size_gb,
        ifnull(lim.tb, 0) * 1000 lim_gb,
        case
          when ifnull(lim.tb, 0) * 1000000000000 = 0 then 'SKIP'
          when nc.billable_size > ifnull(lim.tb, 0) * 1000000000000 * .95 then 'FAIL'
          when nc.billable_size > ifnull(lim.tb, 0) * 1000000000000 * .9 then 'WARN'
          else 'PASS'
        end status
      from
        inv.inv_nodes n
      left join node_counts nc
        on n.id = nc.inv_node_id
      left join (
        select
          9501 as node, 650 as tb
      ) lim
        on n.number = lim.node
      where
        ifnull(nc.object_count, 0) > 0
      order by
        n.number
  /queries/collections:
    description: |
      _Please Choose the Collection for this Report_
    sql: |
      select
        mnemonic as mnemonic_choice,
        ifnull(name, mnemonic) as collection_name
      from
        inv.inv_collections
      where
        mnemonic is not null
      and 
        mnemonic not like '%_sla'
      and 
        mnemonic not like '%_service_level_agreement'
      and 
        mnemonic not like 'mrt_%_classes'
      order By
        mnemonic
  /queries/content/producer-files:
    sql: |
      select
        distinct o.ark,
        v.number,
        substr(f.pathname, 10) as fname,
        billable_size,
        digest_value,
        f.created,
        loc.loc_id_agg
      from
        inv.inv_objects o
      inner join inv.inv_files f
        on f.inv_object_id = o.id and source = 'producer'
      inner join inv.inv_versions v
        on f.inv_version_id = v.id
      left join
        (
          select inv_object_ark, group_concat(local_id) as loc_id_agg
          from inv.inv_localids
          group by inv_object_ark
        ) loc
        on o.ark = inv_object_ark
      where exists (
        select 1
        from
          inv.inv_collections_inv_objects icio
        where
          icio.inv_object_id = o.id
        and
          icio.inv_collection_id = (
            select
              id
            from
              inv.inv_collections c
            where
              c.mnemonic = ?
          )
      )
      order by
        o.ark,
        fname
    parameters:
      - name: mnemonic
        type: string
  /queries/content/ucsc-objects:
    sql: |
      select
        distinct o.ark,
        loc.loc_id_agg,
        replace(o.erc_what, '"', "'") as erc_what,
        replace(o.erc_when, '"', "'") as erc_when,
        replace(o.erc_who, '"', "'") as erc_who,
        (
          select count(*)
          from inv.inv_versions v
          inner join inv.inv_files f
            on f.inv_object_id = o.id and f.inv_version_id = v.id
            and f.source='producer' and o.version_number = v.number
          where v.inv_object_id = o.id
        ) as file_count,
        os.billable_size,
        concat('http://n2t.net/', o.ark) as permalink,
        (
          select group_concat(distinct f.mime_type)
          from inv.inv_files f
          where inv_object_id=o.id and source='producer'
        ) as mimetypes
      from
        inv.inv_objects o
      inner join billing.object_size os
        on os.inv_object_id = o.id
      left join
        (
          select inv_object_ark, group_concat(local_id) as loc_id_agg
          from inv.inv_localids
          group by inv_object_ark
        ) loc
        on o.ark = inv_object_ark
      where exists (
        select 1
        from
          inv.inv_collections_inv_objects icio
        where
          icio.inv_object_id = o.id
        and
          icio.inv_collection_id = (
            select
              id
            from
              inv.inv_collections c
            where
              c.mnemonic = ?
          )
      )
      order by
        o.ark
    parameters:
    - name: mnemonic
      type: string
  /queries/misc/collections:
    totals: true
    sql: |
      select
        id as inv_collection_id,
        mnemonic,
        name as collection_name,
        ark
      from
        inv.inv_collections
      where
        mnemonic is not null
      order by
        mnemonic
  /queries/misc/now:
    sql: |
      select
        now() as current
 