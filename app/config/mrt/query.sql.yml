fragments:
  COLLQ: |
    select
      c.id inv_collection_id,
      mnemonic,
      ark collection_ark,
      name,
      count(*) num_objs,
      inio.role as role,
      n.number as node_number,
      n.description as node_description
    from
      inv.inv_collections c
    inner join inv.inv_collections_inv_objects icio
      on c.id = icio.inv_collection_id
    inner join inv.inv_nodes_inv_objects inio
      on icio.inv_object_id = inio.inv_object_id
    inner join inv.inv_nodes n
      on inio.inv_node_id = n.id
  COLLQGRP: |
    group by
      inv_collection_id,
      mnemonic,
      collection_ark,
      name,
      role,
      node_number,
      node_description
  OBJQ: |
    select
      o.id inv_object_id,
      o.ark,
      o.version_number,
      group_concat(c.mnemonic) as mnemonics,
      own.name,
      erc_what,
      erc_who,
      erc_when,
      (select group_concat(local_id) from inv.inv_localids loc where loc.inv_object_ark = o.ark and loc.inv_owner_ark = own.ark) as local_ids,
      o.created,
      billable_size,
      file_count
    from
      inv.inv_objects o
    left join inv.inv_collections_inv_objects icio
      on o.id = icio.inv_object_id
    left join inv.inv_collections c
      on icio.inv_collection_id = c.id
    left join inv.inv_owners own
      on o.inv_owner_id = own.id
    left join billing.object_size os 
      on o.id = os.inv_object_id
  OBJQ2: |
    group by
      inv_object_id,
      o.ark,
      o.version_number,
      own.name,
      erc_what,
      erc_who,
      erc_when,
      created,
      billable_size,
      file_count
    order by o.id desc
      limit 10
  OBJFILES: |
    select
      o.ark,
      v.number,
      (
        select max(vv.number)
        from inv.inv_files ff
        inner join inv.inv_versions vv
          on ff.inv_version_id = vv.id
        where
          ff.inv_object_id = o.id
        and exists (
          select 1 where ff.pathname=f.pathname
        )
      ) as maxv,
      f.source,
      binary f.pathname,
      f.full_size,
      f.created,
      ifnull(group_concat(n.number), '') as nodelist,
      ifnull(
        group_concat(
          case
            when a.status = 'verified' then null
            else n.number
          end
        ),
        ''
      ) as unverified
    from
      inv.inv_objects o
    inner join inv.inv_versions v
      on o.id = v.inv_object_id
    inner join inv.inv_files f
      on o.id = f.inv_object_id
      and v.id = f.inv_version_id
    left join inv.inv_audits a
      on
        o.id = a.inv_object_id
      and
        f.id = a.inv_file_id
    left join inv.inv_nodes n
      on a.inv_node_id = n.id
  OBJFILES2: |
    and
      f.billable_size = f.full_size
    group by
      o.ark,
      v.number,
      f.source,
      binary f.pathname,
      f.full_size,
      f.created
    order by
      f.created desc,
      source,
      pathname
    limit 2000
  OBJREPL: |
    select
      nn.role,
      nn.node_id,
      nn.node_number,
      nn.description,
      nn.access_mode,
      nn.created,
      nn.replicated,
      (
        select count(*) from inv.inv_audits a
        where a.inv_object_id = nn.inv_object_id and a.inv_node_id=nn.node_id and status != 'verified'
      ) as unverified,
      (
        select max(verified) from inv.inv_audits a
        where a.inv_object_id = nn.inv_object_id and a.inv_node_id=nn.node_id
      ) as last_verified,
      nn.version_number
    from (
      select
        inio.role,
        n.id node_id,
        n.number node_number,
        n.description,
        n.access_mode,
        o.created,
        inio.created as replicated,
        o.id as inv_object_id,
        o.ark as ark,
        o.version_number
      from
        inv.inv_objects o
      inner join inv.inv_nodes_inv_objects inio
        on o.id = inio.inv_object_id
      inner join inv.inv_nodes n
        on inio.inv_node_id = n.id
  OBJREPL2: |
    ) as nn
  REPSQL: |
    select
      case
        when ifnull(c.mnemonic, '') = '' then 'No Mnemonic'
        when c.name = 'Merritt curatorial classes' then 'Stage Exception'
        else 'Default'
      end as category,
      count(*) as num_objs,
      ifnull(
        sum(
          case
            when age.init_created < date_add(now(), INTERVAL -2 DAY) then 1
            else 0
          end
        ),
        0
      ) as num_objs_2day,
      ifnull(
        sum(
          case
            when age.init_created < date_add(now(), INTERVAL -2 DAY) then 0
            when age.init_created < date_add(now(), INTERVAL -1 DAY) then 1
            else 0
          end
        ),
        0
      ) as num_objs_1day,
      ifnull(
        sum(
          case
            when age.init_created < date_add(now(), INTERVAL -2 DAY) then 0
            when age.init_created < date_add(now(), INTERVAL -1 DAY) then 0
            else 1
          end
        ),
        0
      ) as num_objs_0day,
      case
        when count(*) = 0 then 'PASS'
        when {{{COPIES}}} = 3 then 'PASS'
        when ifnull(
          sum(
            case
              when age.init_created < date_add(now(), INTERVAL -2 DAY) then 1
              else 0
            end
          ),
          0
        ) > 0 then
          case
            when c.mnemonic = 'oneshare_dataup' then 'INFO'
            when c.mnemonic = 'dataone_dash' then 'INFO'
            when ifnull(c.mnemonic, '') = '' then 'INFO'
            when {{{COPIES}}} != 2 then 'FAIL'
            else 'FAIL'
          end
        when ifnull(
          sum(
            case
              when age.init_created < date_add(now(), INTERVAL -2 DAY) then 0
              when age.init_created < date_add(now(), INTERVAL -1 DAY) then 1
              else 0
            end
          ),
          0
        ) > 0 then 'WARN'
        else 'PASS'
      end as status
      from (
        select
          inio.inv_object_id,
          min(created) as init_created
        from
          inv.inv_nodes_inv_objects inio
        inner join (
          select
            inv_object_id,
            count(*)
          from
            inv.inv_nodes_inv_objects
          group by
            inv_object_id
          having
            count(*) = {{{COPIES}}}
        ) as copies
        on copies.inv_object_id = inio.inv_object_id
        group by
          inv_object_id
      ) as age      
      inner join inv.inv_collections_inv_objects icio
        on age.inv_object_id = icio.inv_object_id
      inner join inv.inv_collections c
        on icio.inv_collection_id = c.id
      inner join inv.inv_objects o
        on c.inv_object_id = o.id and o.aggregate_role = 'MRT-collection'
      group by
        category
  MIME:
    select
      distinct
        ogroup,
        inv_collection_id,
        mnemonic,
        collection_name,
        mime_group,
        mime_type,
        sum(count_files) files,
        sum(billable_size) size
    from
      owner_coll_mime_use_details
    {{{WHERE}}}
    group by
      ogroup,
      inv_collection_id,
      mnemonic,
      collection_name,
      mime_group,
      mime_type
    order by
      ogroup,
      mnemonic
queries:
  /queries/repository/campus:
    totals: true
    sql: |
      select
        distinct
        ogroup as campus,
        count(distinct inv_collection_id) num_colls,
        sum(count_files) files,
        sum(billable_size) size
      from
        owner_coll_mime_use_details ocmud
      group by
        ogroup
      order by
        ogroup
  /queries/repository/campus-objects:
    totals: true
    sql: |
      select
        distinct
        ogroup as campus,
        count(distinct inv_collection_id) num_colls,
        sum(count_objects) num_objs
      from
        owner_collections_objects
      group by
        ogroup
      order by
        ogroup
  /queries/repository/collections:
    totals: true
    sql: |
      select
        distinct
        ogroup,
        inv_collection_id,
        mnemonic,
        collection_name,
        sum(count_files) files,
        sum(billable_size) size
      from
        owner_coll_mime_use_details
      group by
        ogroup,
        inv_collection_id,
        mnemonic,
        collection_name
      order by
        ogroup,
        mnemonic
  /queries/repository/collection:
    sql: |
      {{{COLLQ}}}
      where
        c.id = ?
      {{{COLLQGRP}}}
    parameters:
    - name: inv_collection_id
      type: integer
  /queries/repository/collection-mnemonic:
    sql: |
      {{{COLLQ}}}
      where
        c.mnemonic = ?
      {{{COLLQGRP}}}
    parameters:
    - name: mnemonic
      type: string
  /queries/repository/object:
    sql: |
      {{{OBJQ}}}
      where
        o.id = ?
      {{{OBJQ2}}}
    files_sql: |
      {{{OBJFILES}}}
      where
        o.id = ?
      {{{OBJFILES2}}}
    repl_sql: |
      {{{OBJREPL}}}
        where
          o.id = ?
      {{{OBJREPL2}}}
    parameters:
    - name: inv_object_id
      type: integer
  /queries/repository/object-ark:
    sql: |
      {{{OBJQ}}}
      where
        o.ark = ?
      {{{OBJQ2}}}
    files_sql: |
      {{{OBJFILES}}}
      where
        o.ark = ?
      {{{OBJFILES2}}}
    repl_sql: |
      {{{OBJREPL}}}
        where
        o.ark = ?
      {{{OBJREPL2}}}
    parameters:
    - name: ark
      type: string
  /queries/repository/objects:
    sql: |
      {{{OBJQ}}}
      where o.id >= (select max(id)-10 from inv.inv_objects)
      {{{OBJQ2}}}
  /queries/repository/objects-localid:
    sql: |
      {{{OBJQ}}}
      where exists (
        select 1 from inv.inv_localids loc
        where loc.inv_object_ark = o.ark
        and loc.local_id = ?
      )
      {{{OBJQ2}}}
    parameters:
    - name: localid
      type: string
  /queries/repository/objects-erc-who:
    sql: |
      {{{OBJQ}}}
      where o.erc_who like ?
      {{{OBJQ2}}}
    parameters:
    - name: term
      type: string
  /queries/repository/objects-erc-what:
    sql: |
      {{{OBJQ}}}
      where o.erc_what like ?
      {{{OBJQ2}}}
    parameters:
    - name: term
      type: string
  /queries/repository/objects-erc-when:
    sql: |
      {{{OBJQ}}}
      where o.erc_when like ?
      {{{OBJQ2}}}
    parameters:
    - name: term
      type: string
  /queries/repository/objects-by-filename:
    sql: |
      {{{OBJQ}}}
      where exists (
        select 1 from inv.inv_files f
        where pathname like ?
        and f.inv_object_id = o.id
      )
      {{{OBJQ2}}}
    parameters:
    - name: term
      type: string
  /queries/repository/objects-by-container:
    sql: |
      {{{OBJQ}}}
      where exists (
        select 1 from inv.inv_ingests ing
        where filename = ?
        and ing.inv_object_id = o.id
      )
      {{{OBJQ2}}}
    parameters:
    - name: term
      type: string
  /queries/repository/collections-objects:
    totals: true
    sql: |
      select
        distinct
        ogroup,
        inv_collection_id,
        (select mnemonic from inv.inv_collections where id=inv_collection_id) mnemonic,
        collection_name,
        sum(count_objects) num_objs
      from
        owner_collections_objects
      group by
        ogroup,
        inv_collection_id,
        mnemonic,
        collection_name
      order by
        ogroup,
        mnemonic
  /queries/repository/owners:
    totals: true
    sql: |
      select
          ogroup,
          inv_owner_id as owner_id,
          own_name,
          (select ark from inv.inv_owners where id=inv_owner_id) owner_ark,
          sum(count_files) files,
          sum(billable_size) size
        from
          owner_coll_mime_use_details
        group by
          ogroup,
          owner_id,
          own_name
        order by
          ogroup,
          own_name
  /queries/consistency/replication-objects-2:
    template-params:
      COPIES: 2
    totals: true
    sql: |
      {{{REPSQL}}}
  /queries/consistency/replication-objects-1:
    template-params:
      COPIES: 1
    totals: true
    sql: |
      {{{REPSQL}}}
  /queries/consistency/replication-objects-4:
    template-params:
      COPIES: 4
    totals: true
    sql: |
      {{{REPSQL}}}
  /queries/repository/mimes/campus/CDL:
    template-params:
      WHERE: where ogroup = CDL
    totals: true
    sql: |
      {{{MIME}}}
  /queries/repository/mimes/campus/UCB:
    template-params:
      WHERE: where ogroup = 'UCB'
    totals: true
    sql: |
      {{{MIME}}}
  /queries/repository/mimes/campus/UCD:
    template-params:
      WHERE: where ogroup = 'UCD'
    totals: true
    sql: |
      {{{MIME}}}
  /queries/repository/mimes/campus/UCI:
    template-params:
      WHERE: where ogroup = 'UCI'
    totals: true
    sql: |
      {{{MIME}}}
  /queries/repository/mimes/campus/UCLA:
    template-params:
      WHERE: where ogroup = 'UCLA'
    totals: true
    sql: |
      {{{MIME}}}
  /queries/repository/mimes/campus/UCM:
    template-params:
      WHERE: where ogroup = 'UCM'
    totals: true
    sql: |
      {{{MIME}}}
  /queries/repository/mimes/campus/UCSB:
    template-params:
      WHERE: where ogroup = 'UCSB'
    totals: true
    sql: |
      {{{MIME}}}
  /queries/repository/mimes/campus/UCSC:
    template-params:
      WHERE: where ogroup = 'UCSC'
    totals: true
    sql: |
      {{{MIME}}}
  /queries/repository/mimes/campus/UCSD:
    template-params:
      WHERE: where ogroup = 'UCSD'
    totals: true
    sql: |
      {{{MIME}}}
  /queries/repository/mimes/campus/UCSF:
    template-params:
      WHERE: where ogroup = 'UCSF'
    totals: true
    sql: |
      {{{MIME}}}
  /queries/repository/mimes/campus/Other:
    template-params:
      WHERE: where ogroup = 'Other'
    totals: true
    sql: |
      {{{MIME}}}
  /queries/repository/mimes/group/image:
    template-params:
      WHERE: where mime_group = 'image'
    totals: true
    sql: |
      {{{MIME}}}
  /queries/repository/mimes/group/text:
    template-params:
      WHERE: where mime_group = 'text'
    totals: true
    sql: |
      {{{MIME}}}
  /queries/consistency/mult-colls:
    totals: true
    sql: |
      tbd