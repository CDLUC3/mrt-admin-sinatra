version: 0.2

phases:
  install:
    commands:
    - yum install -y yq
  
  pre_build:
    on-failure: ABORT
    commands:
    - COMMIT=`git rev-parse --short HEAD`
    - TAG=`git describe --tags --exact-match 2> /dev/null || echo ''`
    - |
      if [[ "$MODE" == "OnPush" ]]
      then
        BRANCHTAG=`git describe --tags --exact-match 2> /dev/null || git symbolic-ref -q --short HEAD || git name-rev $(git rev-parse --short HEAD) | cut -d' ' -f2 || git rev-parse --short HEAD`
      else
        BRANCHTAG=$BRANCHNAME
      fi
    - DOCKTAG=$BRANCHTAG
    - COMMITDATE=`git --no-pager log -1 --pretty='format:%cd' --date='format:%Y-%m-%d %H:%M:%S'`
    - echo "Branchtag ${BRANCHTAG}; COMMITDATE=${COMMITDATE}; REPONAME=${REPONAME}; BRANCHNAME=${BRANCHNAME}"
    - aws ecr get-login-password --region $AWS_REGION | docker login --username AWS --password-stdin ${ECR_REGISTRY}

    - DEVBUCK=$(aws ssm get-parameter --name /uc3/mrt/config-bucket-dev --query Parameter.Value --output text)
    - aws s3 cp s3://${DEVBUCK}/uc3/mrt/mrt-ecs-manifest/ecs-release-manifest.yaml /tmp/ecs-release-manifest.yaml
    - yq '."ecs-tagmap"."mrt-admin-sinatra"' /tmp/ecs-release-manifest.yaml
  build:
    on-failure: CONTINUE
    commands:
    - |
      if [[ "$ADMIN_MODE" == "build" ]]
      then
        CA_CERT_NAME=UC3-Self-Signed-CA.crt
        aws ssm get-parameter --name /uc3/default/uc3_ca/$CA_CERT_NAME --output text --query 'Parameter.Value' > $CA_CERT_NAME

        docker build --quiet --push \
          --build-arg ECR_REGISTRY=${ECR_REGISTRY} \
          -t ${ECR_REGISTRY}/mrt-admin-sinatra .
      
        docker build --quiet --push \
          --build-arg ECR_REGISTRY=${ECR_REGISTRY} \
          -t ${ECR_REGISTRY}/mrt-admin-sinatra:ecs-dev .
      fi

    - |
      if [[ "$ADMIN_MODE" == "build" ]]
      then
        aws ecs update-service --cluster mrt-ecs-dev-stack --service admintool \
          --desired-count 2 --output yaml --no-cli-pager \
          --force-new-deployment || echo "Skip ecs-dev Deployment"

        aws ecs update-service --cluster mrt-ecs-ephemeral-stack --service admintool \
          --desired-count 2 --output yaml --no-cli-pager \
          --force-new-deployment || echo "Skip ecs-ephemeral Deployment"

        aws ecs update-service --cluster mrt-ecs-dbsnapshot-stack --service admintool \
          --desired-count 2 --output yaml --no-cli-pager \
          --force-new-deployment || echo "Skip ecs-dbsnapshot Deployment"
        
        aws lambda update-function-code \
          --function-name arn:aws:lambda:us-west-2:451826914157:function:uc3-mrt-admintool-img-dev \
          --image-uri ${ECR_REGISTRY}/mrt-admin-sinatra:ecs-dev \
          --output text --region us-west-2 \
          --no-cli-pager || echo "Skip Lambda Deployment"

        aws lambda update-function-code \
          --function-name arn:aws:lambda:us-west-2:451826914157:function:uc3-mrt-admintool-img-stg \
          --image-uri ${ECR_REGISTRY}/mrt-admin-sinatra:ecs-dev \
          --output text --region us-west-2 \
          --no-cli-pager || echo "Skip Lambda Deployment"

        aws lambda update-function-code \
          --function-name arn:aws:lambda:us-west-2:451826914157:function:uc3-mrt-admintool-img-prd \
          --image-uri ${ECR_REGISTRY}/mrt-admin-sinatra:ecs-dev \
          --output text --region us-west-2 \
          --no-cli-pager || echo "Skip Lambda Deployment"
      fi
    - |
      if [[ "$ADMIN_MODE" == "build" ]]
      then
        mkdir -p doc api/mrt-admin-sinatra/ruby
        docker run --rm -v "$(pwd)/doc:/var/task/doc" --entrypoint /var/task/make_rdoc.sh ${ECR_REGISTRY}/mrt-admin-sinatra:ecs-dev
        cp -r doc/* api/mrt-admin-sinatra/ruby/
        aws s3 cp --recursive api s3://${S3CFBUCKET}/api 
        aws cloudfront create-invalidation --distribution-id ${CFDISTRIBUTIONID} --paths /api/mrt-admin-sinatra/* --region us-east-1

        docker pull ${ECR_REGISTRY}/docker-hub/webpronl/reveal-md --quiet
        docker-compose -f present/deploy/docker-compose-static.yml up
        aws s3 rm --recursive --only-show-errors s3://${S3CFBUCKET}/present/ecs-deploy|| echo 'delete skipped'
        aws s3 cp --recursive --only-show-errors present/deploy/present_build s3://${S3CFBUCKET}/present/ecs-deploy
        aws s3 cp --recursive --only-show-errors present/deploy/images s3://${S3CFBUCKET}/present/ecs-deploy/images

        aws cloudfront create-invalidation --distribution-id ${CFDISTRIBUTIONID} --paths /present/ecs-deploy/* --region us-east-1

        docker-compose -f present/tagging/docker-compose-static.yml up
        mkdir -p present/tagging/present_build/mermaid/dist
        curl "https://cdn.jsdelivr.net/npm/mermaid@11.6.0/dist/mermaid.min.js" -o present/tagging/present_build/mermaid/dist/mermaid.min.js
        aws s3 rm --recursive --only-show-errors s3://${S3CFBUCKET}/present/tagging || echo 'delete skipped'
        aws s3 cp --recursive --only-show-errors present/tagging/present_build s3://${S3CFBUCKET}/present/tagging
        aws s3 cp --recursive --only-show-errors present/tagging/images s3://${S3CFBUCKET}/present/tagging/images

        aws cloudfront create-invalidation --distribution-id ${CFDISTRIBUTIONID} --paths /present/tagging/* --region us-east-1
      fi