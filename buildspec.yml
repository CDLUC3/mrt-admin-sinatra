version: 0.2

phases:
  pre_build:
    on-failure: ABORT
    commands:
    - COMMIT=`git rev-parse --short HEAD`
    - TAG=`git describe --tags --exact-match 2> /dev/null || echo ''`
    - |
      if [[ "$MODE" == "OnPush" ]]
      then
        BRANCHTAG=`git describe --tags --exact-match 2> /dev/null || git symbolic-ref -q --short HEAD || git name-rev $(git rev-parse --short HEAD) | cut -d' ' -f2 || git rev-parse --short HEAD`
      else
        BRANCHTAG=$BRANCHNAME
      fi
    - DOCKTAG=$BRANCHTAG
    - COMMITDATE=`git --no-pager log -1 --pretty='format:%cd' --date='format:%Y-%m-%d %H:%M:%S'`
    - echo "Branchtag ${BRANCHTAG}; COMMITDATE=${COMMITDATE}; REPONAME=${REPONAME}; BRANCHNAME=${BRANCHNAME}"
    - aws ecr get-login-password --region $AWS_REGION | docker login --username AWS --password-stdin ${ECR_REGISTRY}

  build:
    on-failure: CONTINUE
    commands:
    - |
      admintool_ip() {
        aws servicediscovery discover-instances \
          --service-name admintool --namespace-name merritt | \
          jq -r ".Instances[0].Attributes.AWS_INSTANCE_IPV4"
      }

      curl_format() {
        echo "\t%{http_code}\t%{content_type}\t%{size_download}\t%{time_total}\n"
      }

      test_route() {
        route=$1
        echo $route
        curl -H "Accept: application/json" -o /tmp/curl.json -s -w "$(curl_format)" ${admintool}${route} 2>/dev/null
        cat /tmp/curl.json | jq
        cat /tmp/curl.json | jq -r '.context.title // "na"'
        cat /tmp/curl.json | jq -r '.table | length'
      }

      if [[ "$ADMIN_MODE" == "build" ]]
      then
        docker build --quiet --push \
          --build-arg ECR_REGISTRY=${ECR_REGISTRY} \
          -t ${ECR_REGISTRY}/mrt-admin-sinatra .
      
        docker build --quiet --push \
          --build-arg ECR_REGISTRY=${ECR_REGISTRY} \
          -t ${ECR_REGISTRY}/mrt-admin-sinatra:ecs-dev .
      fi

      if [[ "$ADMIN_MODE" == "consistency-check" ]]
      then
        admintool=$(admintool_ip):9292
        for route in $(curl --no-progress-meter http://$admintool/test/consistency | jq -r '.[]')
        do
          test_route $route
        done
      fi

      if [[ "$ADMIN_MODE" == "unit-test" ]]
      then
        admintool=$(admintool_ip):9292
        for route in $(curl --no-progress-meter http://$admintool/test/routes | jq -r '.[]')
        do
          test_route $route
        done
      fi
    - |
      if [[ "$ADMIN_MODE" == "build" ]]
      then
        aws lambda update-function-code \
          --function-name mrt-admin-sinatra \
          --image-uri ${ECR_REGISTRY}/mrt-admin-sinatra:latest \
          --no-cli-pager

        aws lambda update-function-code \
          --function-name mrt-admin-sinatra-no-vpc \
          --image-uri ${ECR_REGISTRY}/mrt-admin-sinatra:latest \
          --no-cli-pager

        aws ecs update-service --cluster mrt-ecs-stack --service admintool \
          --desired-count 2 --output yaml --no-cli-pager \
          --force-new-deployment || echo "Skip ECS Deployment"
      fi
    - |
      if [[ "$ADMIN_MODE" == "build" ]]
      then
        docker pull ${ECR_REGISTRY}/docker-hub/webpronl/reveal-md --quiet
        docker-compose -f present/deploy/docker-compose-static.yml up
        aws s3 rm --recursive --only-show-errors s3://${S3CFBUCKET}/present/ecs-deploy|| echo 'delete skipped'
        aws s3 cp --recursive --only-show-errors present/deploy/present_build s3://${S3CFBUCKET}/present/ecs-deploy
        aws s3 cp --recursive --only-show-errors present/deploy/images s3://${S3CFBUCKET}/present/ecs-deploy/images

        aws cloudfront create-invalidation --distribution-id ${CFDISTRIBUTIONID} --paths /present/ecs-deploy/* --region us-east-1

        docker-compose -f present/tagging/docker-compose-static.yml up
        mkdir -p present/tagging/present_build/mermaid/dist
        curl "https://cdn.jsdelivr.net/npm/mermaid@11.6.0/dist/mermaid.min.js" -o present/tagging/present_build/mermaid/dist/mermaid.min.js
        aws s3 rm --recursive --only-show-errors s3://${S3CFBUCKET}/present/tagging || echo 'delete skipped'
        aws s3 cp --recursive --only-show-errors present/tagging/present_build s3://${S3CFBUCKET}/present/tagging
        aws s3 cp --recursive --only-show-errors present/tagging/images s3://${S3CFBUCKET}/present/tagging/images

        aws cloudfront create-invalidation --distribution-id ${CFDISTRIBUTIONID} --paths /present/tagging/* --region us-east-1
      fi